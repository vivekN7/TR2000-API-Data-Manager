-- ===============================================================================
-- Create API Service Package in API_PROXY Schema
-- Date: 2025-08-27
-- Purpose: Centralized API calling service with logging
-- ===============================================================================

-- Connect as API_PROXY user to create the package
-- Or run as SYSTEM with schema prefix

PROMPT ===============================================================================
PROMPT Creating PKG_API_SERVICE in API_PROXY schema
PROMPT ===============================================================================

-- Create log table for API calls (optional but useful)
CREATE TABLE API_PROXY.API_CALL_LOG (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    calling_user    VARCHAR2(50) DEFAULT USER,
    url             VARCHAR2(500),
    method          VARCHAR2(10),
    correlation_id  VARCHAR2(36),
    status_code     NUMBER,
    request_time    TIMESTAMP DEFAULT SYSTIMESTAMP,
    response_time   TIMESTAMP,
    elapsed_ms      NUMBER,
    error_message   VARCHAR2(4000)
);

-- Create the service package
CREATE OR REPLACE PACKAGE API_PROXY.PKG_API_SERVICE AS

    -- Main API call function
    FUNCTION make_api_call(
        p_url            VARCHAR2,
        p_method         VARCHAR2 DEFAULT 'GET',
        p_wallet_path    VARCHAR2 DEFAULT 'file:C:\wallet',
        p_wallet_pwd     VARCHAR2 DEFAULT NULL,
        p_correlation_id VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;
    
    -- Set request headers (must be called before make_api_call)
    PROCEDURE set_request_header(
        p_name  VARCHAR2,
        p_value VARCHAR2
    );
    
    -- Clear all request headers
    PROCEDURE clear_request_headers;
    
    -- Get last HTTP status code
    FUNCTION get_last_status_code RETURN NUMBER;
    
    -- Get API call statistics
    FUNCTION get_call_stats(p_days NUMBER DEFAULT 1) RETURN VARCHAR2;

END PKG_API_SERVICE;
/

CREATE OR REPLACE PACKAGE BODY API_PROXY.PKG_API_SERVICE AS

    g_last_status_code NUMBER;

    -- Main API call function
    FUNCTION make_api_call(
        p_url            VARCHAR2,
        p_method         VARCHAR2 DEFAULT 'GET',
        p_wallet_path    VARCHAR2 DEFAULT 'file:C:\wallet',
        p_wallet_pwd     VARCHAR2 DEFAULT NULL,
        p_correlation_id VARCHAR2 DEFAULT NULL
    ) RETURN CLOB IS
        v_response      CLOB;
        v_start_time    TIMESTAMP := SYSTIMESTAMP;
        v_end_time      TIMESTAMP;
        v_elapsed_ms    NUMBER;
        v_error_msg     VARCHAR2(4000);
        v_log_id        NUMBER;
    BEGIN
        -- Log the request
        INSERT INTO API_CALL_LOG (
            calling_user, url, method, correlation_id, request_time
        ) VALUES (
            USER, p_url, p_method, p_correlation_id, v_start_time
        ) RETURNING log_id INTO v_log_id;
        COMMIT;
        
        -- Make the actual API call
        BEGIN
            v_response := APEX_WEB_SERVICE.make_rest_request(
                p_url         => p_url,
                p_http_method => p_method,
                p_wallet_path => p_wallet_path,
                p_wallet_pwd  => p_wallet_pwd
            );
            
            g_last_status_code := APEX_WEB_SERVICE.g_status_code;
            v_end_time := SYSTIMESTAMP;
            v_elapsed_ms := EXTRACT(SECOND FROM (v_end_time - v_start_time)) * 1000;
            
            -- Update log with success
            UPDATE API_CALL_LOG
            SET status_code = g_last_status_code,
                response_time = v_end_time,
                elapsed_ms = v_elapsed_ms
            WHERE log_id = v_log_id;
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN
                v_error_msg := SQLERRM;
                v_end_time := SYSTIMESTAMP;
                v_elapsed_ms := EXTRACT(SECOND FROM (v_end_time - v_start_time)) * 1000;
                
                -- Update log with error
                UPDATE API_CALL_LOG
                SET error_message = v_error_msg,
                    response_time = v_end_time,
                    elapsed_ms = v_elapsed_ms
                WHERE log_id = v_log_id;
                COMMIT;
                
                -- Re-raise the error
                RAISE;
        END;
        
        RETURN v_response;
        
    END make_api_call;
    
    -- Set request headers
    PROCEDURE set_request_header(
        p_name  VARCHAR2,
        p_value VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        -- Get current count of headers
        v_count := NVL(APEX_WEB_SERVICE.g_request_headers.COUNT, 0) + 1;
        
        -- Add the header
        APEX_WEB_SERVICE.g_request_headers(v_count).name := p_name;
        APEX_WEB_SERVICE.g_request_headers(v_count).value := p_value;
    END set_request_header;
    
    -- Clear all request headers
    PROCEDURE clear_request_headers IS
    BEGIN
        APEX_WEB_SERVICE.g_request_headers.DELETE;
    END clear_request_headers;
    
    -- Get last HTTP status code
    FUNCTION get_last_status_code RETURN NUMBER IS
    BEGIN
        RETURN g_last_status_code;
    END get_last_status_code;
    
    -- Get API call statistics
    FUNCTION get_call_stats(p_days NUMBER DEFAULT 1) RETURN VARCHAR2 IS
        v_stats VARCHAR2(4000);
    BEGIN
        SELECT 'API Calls (last ' || p_days || ' days): ' || 
               'Total=' || COUNT(*) || 
               ', Success=' || SUM(CASE WHEN status_code = 200 THEN 1 ELSE 0 END) ||
               ', Errors=' || SUM(CASE WHEN error_message IS NOT NULL THEN 1 ELSE 0 END) ||
               ', Avg Response=' || ROUND(AVG(elapsed_ms)) || 'ms'
        INTO v_stats
        FROM API_CALL_LOG
        WHERE request_time > SYSTIMESTAMP - INTERVAL '1' DAY * p_days;
        
        RETURN v_stats;
        
    END get_call_stats;

END PKG_API_SERVICE;
/

-- Grant execute to TR2000_STAGING
GRANT EXECUTE ON API_PROXY.PKG_API_SERVICE TO TR2000_STAGING;

-- Create public synonym for easier access
CREATE PUBLIC SYNONYM PKG_API_SERVICE FOR API_PROXY.PKG_API_SERVICE;

-- Grant select on log table to TR2000_STAGING (for monitoring)
GRANT SELECT ON API_PROXY.API_CALL_LOG TO TR2000_STAGING;

PROMPT 
PROMPT ===============================================================================
PROMPT PKG_API_SERVICE created successfully in API_PROXY schema!
PROMPT ===============================================================================
PROMPT Privileges granted:
PROMPT   - TR2000_STAGING can execute PKG_API_SERVICE
PROMPT   - Public synonym created for easy access
PROMPT   - TR2000_STAGING can view API_CALL_LOG
PROMPT ===============================================================================
PROMPT 
PROMPT Test with:
PROMPT   SELECT PKG_API_SERVICE.make_api_call(
PROMPT            'https://equinor.pipespec-api.presight.com/plants', 'GET'
PROMPT          ) FROM dual;
PROMPT ===============================================================================