-- ===============================================================================
-- Logging Tables - TR2000 ETL System
-- ===============================================================================
-- Purpose: Audit trail and error logging for ETL operations
-- ===============================================================================

-- ETL_RUN_LOG: Complete audit trail of ETL executions
CREATE TABLE ETL_RUN_LOG (
    run_id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_type            VARCHAR2(50) NOT NULL,
    endpoint_key        VARCHAR2(100),
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    start_time          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    end_time            TIMESTAMP,
    status              VARCHAR2(50) DEFAULT 'RUNNING' NOT NULL,
    records_processed   NUMBER,
    records_inserted    NUMBER,
    records_updated     NUMBER,
    records_invalidated NUMBER,
    error_count         NUMBER,
    duration_seconds    NUMBER,
    initiated_by        VARCHAR2(50),
    notes               VARCHAR2(4000)
);

COMMENT ON TABLE ETL_RUN_LOG IS 'Complete audit trail of all ETL executions with timing and record counts';
COMMENT ON COLUMN ETL_RUN_LOG.run_id IS 'Internal surrogate key';
COMMENT ON COLUMN ETL_RUN_LOG.run_type IS 'Type of ETL run (PLANTS_API_REFRESH, ISSUES_API_REFRESH, etc.)';
COMMENT ON COLUMN ETL_RUN_LOG.endpoint_key IS 'API endpoint that was processed';
COMMENT ON COLUMN ETL_RUN_LOG.plant_id IS 'Plant ID if run was plant-specific';
COMMENT ON COLUMN ETL_RUN_LOG.start_time IS 'When ETL run started';
COMMENT ON COLUMN ETL_RUN_LOG.end_time IS 'When ETL run completed';
COMMENT ON COLUMN ETL_RUN_LOG.status IS 'SUCCESS, FAILED, RUNNING, SKIPPED';
COMMENT ON COLUMN ETL_RUN_LOG.records_processed IS 'Total records processed';
COMMENT ON COLUMN ETL_RUN_LOG.duration_seconds IS 'Total run time in seconds';
COMMENT ON COLUMN ETL_RUN_LOG.notes IS 'Any messages or error details';

CREATE INDEX IDX_ETL_LOG_STATUS ON ETL_RUN_LOG(status);
CREATE INDEX IDX_ETL_LOG_TIME ON ETL_RUN_LOG(start_time);
CREATE INDEX IDX_ETL_LOG_PLANT ON ETL_RUN_LOG(plant_id);
CREATE INDEX IDX_ETL_LOG_ENDPOINT ON ETL_RUN_LOG(endpoint_key);

-- ETL_ERROR_LOG: Detailed error tracking
CREATE TABLE ETL_ERROR_LOG (
    error_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_id              NUMBER,
    endpoint_key        VARCHAR2(100),
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    error_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    error_type          VARCHAR2(50),
    error_code          VARCHAR2(50),
    error_message       VARCHAR2(4000),
    error_stack         CLOB,
    raw_data            CLOB,
    resolution_status   VARCHAR2(50),
    resolved_by         VARCHAR2(50),
    resolution_notes    VARCHAR2(4000)
);

COMMENT ON TABLE ETL_ERROR_LOG IS 'Detailed error logging with stack traces for troubleshooting ETL failures';

-- Optimized composite index
CREATE INDEX IDX_ETL_ERROR_COMPOSITE ON ETL_ERROR_LOG(plant_id, endpoint_key, error_timestamp);
CREATE INDEX IDX_ETL_ERROR_RUN ON ETL_ERROR_LOG(run_id);
CREATE INDEX IDX_ETL_ERROR_TIMESTAMP ON ETL_ERROR_LOG(error_timestamp);