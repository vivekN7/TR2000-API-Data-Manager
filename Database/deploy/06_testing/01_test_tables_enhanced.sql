-- ============================================================================
-- File: 01_test_tables_enhanced.sql
-- Purpose: Enhanced testing infrastructure tables for detailed ETL validation
-- Author: TR2000 ETL Team
-- Date: 2025-08-24
-- Version: 2.0 - Enhanced with detailed failure tracking (removed V2 suffix)
-- ============================================================================

-- Drop existing test tables and views if they exist
BEGIN
    -- Drop views first
    FOR v IN (SELECT view_name FROM user_views WHERE view_name IN ('V_TEST_BY_FLOW_STEP', 'V_TEST_FAILURE_ANALYSIS', 'V_TEST_COVERAGE', 'V_TEST_SUMMARY', 'V_TEST_FAILURES')) LOOP
        EXECUTE IMMEDIATE 'DROP VIEW ' || v.view_name;
    END LOOP;
    
    -- Drop tables
    FOR t IN (SELECT table_name FROM user_tables WHERE table_name IN ('TEST_RESULTS', 'TEST_RESULTS_V2', 'TEMP_TEST_DATA')) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
    
    -- Drop procedures
    BEGIN
        EXECUTE IMMEDIATE 'DROP PROCEDURE log_test_result_v2';
    EXCEPTION
        WHEN OTHERS THEN NULL;
    END;
END;
/

-- ============================================================================
-- TEST_RESULTS: Enhanced test execution results with detailed tracking
-- ============================================================================
CREATE TABLE TEST_RESULTS (
    test_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    test_name VARCHAR2(100) NOT NULL,
    run_date DATE DEFAULT SYSDATE NOT NULL,
    execution_time_ms NUMBER,
    data_flow_step VARCHAR2(50) NOT NULL,
    test_category VARCHAR2(50),
    test_suite VARCHAR2(50) DEFAULT 'CORE',
    status VARCHAR2(20) NOT NULL,
    failure_mode VARCHAR2(100),
    error_code VARCHAR2(20),
    error_message VARCHAR2(4000),
    failed_procedure VARCHAR2(100),
    failed_at_line NUMBER,
    test_parameters CLOB,
    actual_result CLOB,
    expected_result CLOB,
    records_tested NUMBER,
    records_failed NUMBER,
    CONSTRAINT chk_test_status CHECK (status IN ('PASS', 'FAIL', 'ERROR', 'SKIP', 'WARNING'))
);

-- Add comments
COMMENT ON TABLE TEST_RESULTS IS 'Enhanced test results with detailed failure tracking and categorization';
COMMENT ON COLUMN TEST_RESULTS.test_id IS 'Auto-generated test result ID';
COMMENT ON COLUMN TEST_RESULTS.test_name IS 'Name of the test function executed';
COMMENT ON COLUMN TEST_RESULTS.run_date IS 'Timestamp when test was executed';
COMMENT ON COLUMN TEST_RESULTS.execution_time_ms IS 'Test execution duration in milliseconds';

COMMENT ON COLUMN TEST_RESULTS.data_flow_step IS 'Which ETL pipeline step is being tested';
COMMENT ON COLUMN TEST_RESULTS.test_category IS 'Type of test (connectivity, parsing, validation, etc.)';
COMMENT ON COLUMN TEST_RESULTS.test_suite IS 'Grouping for test categories (CORE, REFERENCE, PCS, etc.)';

COMMENT ON COLUMN TEST_RESULTS.status IS 'Test outcome: PASS, FAIL, ERROR, SKIP, WARNING';
COMMENT ON COLUMN TEST_RESULTS.failure_mode IS 'Classification of failure type';

COMMENT ON COLUMN TEST_RESULTS.error_code IS 'Specific error code (ORA-, HTTP status, custom)';
COMMENT ON COLUMN TEST_RESULTS.error_message IS 'Full error message or failure description';
COMMENT ON COLUMN TEST_RESULTS.failed_procedure IS 'Exact procedure/function that failed';
COMMENT ON COLUMN TEST_RESULTS.failed_at_line IS 'Line number in procedure where failure occurred';

COMMENT ON COLUMN TEST_RESULTS.test_parameters IS 'JSON string of parameters used in test';
COMMENT ON COLUMN TEST_RESULTS.actual_result IS 'What actually happened during test';
COMMENT ON COLUMN TEST_RESULTS.expected_result IS 'What was expected to happen';

COMMENT ON COLUMN TEST_RESULTS.records_tested IS 'Number of records involved in test';
COMMENT ON COLUMN TEST_RESULTS.records_failed IS 'Number of records that failed validation';

-- Create indexes for analysis
CREATE INDEX idx_test_results_date ON TEST_RESULTS(run_date DESC);
CREATE INDEX idx_test_results_status ON TEST_RESULTS(status, run_date DESC);
CREATE INDEX idx_test_results_flow ON TEST_RESULTS(data_flow_step, status);
CREATE INDEX idx_test_results_failure ON TEST_RESULTS(failure_mode, run_date DESC);

-- ============================================================================
-- TEMP_TEST_DATA: Temporary storage for test data generation
-- ============================================================================
CREATE TABLE TEMP_TEST_DATA (
    data_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_type VARCHAR2(50) NOT NULL,
    data_key VARCHAR2(100) NOT NULL,
    data_value CLOB,
    created_date DATE DEFAULT SYSDATE,
    CONSTRAINT uk_test_data UNIQUE (data_type, data_key)
);

COMMENT ON TABLE TEMP_TEST_DATA IS 'Temporary storage for test JSON responses and mock data';
COMMENT ON COLUMN TEMP_TEST_DATA.data_type IS 'Type of test data (PLANT_JSON, ISSUE_JSON, etc.)';
COMMENT ON COLUMN TEMP_TEST_DATA.data_key IS 'Unique identifier for this test data';
COMMENT ON COLUMN TEMP_TEST_DATA.data_value IS 'JSON or other test data content';

-- ============================================================================
-- Enhanced views for test analysis
-- ============================================================================

-- View: Test results by data flow step
CREATE OR REPLACE VIEW V_TEST_BY_FLOW_STEP AS
SELECT 
    data_flow_step,
    COUNT(*) as total_tests,
    SUM(CASE WHEN status = 'PASS' THEN 1 ELSE 0 END) as passed,
    SUM(CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END) as failed,
    SUM(CASE WHEN status = 'ERROR' THEN 1 ELSE 0 END) as errors,
    ROUND(100 * SUM(CASE WHEN status = 'PASS' THEN 1 ELSE 0 END) / COUNT(*), 1) as pass_rate,
    LISTAGG(DISTINCT failure_mode, ', ') WITHIN GROUP (ORDER BY failure_mode) as failure_modes
FROM TEST_RESULTS
WHERE run_date >= TRUNC(SYSDATE)
GROUP BY data_flow_step
ORDER BY 
    CASE data_flow_step 
        WHEN 'API_TO_RAW' THEN 1
        WHEN 'RAW_TO_STG' THEN 2
        WHEN 'STG_TO_CORE' THEN 3
        WHEN 'SELECTION' THEN 4
        ELSE 99
    END;

-- View: Failure mode analysis
CREATE OR REPLACE VIEW V_TEST_FAILURE_ANALYSIS AS
SELECT 
    failure_mode,
    data_flow_step,
    COUNT(*) as occurrence_count,
    COUNT(DISTINCT test_name) as affected_tests,
    LISTAGG(DISTINCT error_code, ', ') WITHIN GROUP (ORDER BY error_code) as error_codes,
    SUBSTR(MAX(error_message), 1, 200) as sample_error,
    MAX(failed_procedure) as failed_procedure,
    MAX(run_date) as last_occurrence
FROM TEST_RESULTS
WHERE status IN ('FAIL', 'ERROR')
  AND run_date >= SYSDATE - 7  -- Last 7 days
GROUP BY failure_mode, data_flow_step
ORDER BY occurrence_count DESC;

-- View: Test coverage by category
CREATE OR REPLACE VIEW V_TEST_COVERAGE AS
SELECT 
    test_category,
    data_flow_step,
    COUNT(DISTINCT test_name) as unique_tests,
    SUM(CASE WHEN run_date >= TRUNC(SYSDATE) THEN 1 ELSE 0 END) as runs_today,
    MIN(run_date) as first_run,
    MAX(run_date) as last_run,
    AVG(execution_time_ms) as avg_execution_ms
FROM TEST_RESULTS
GROUP BY test_category, data_flow_step
ORDER BY test_category, data_flow_step;

-- View: Test summary (backwards compatibility)
CREATE OR REPLACE VIEW V_TEST_SUMMARY AS
SELECT 
    test_suite,
    COUNT(*) as total_tests,
    SUM(CASE WHEN status = 'PASS' THEN 1 ELSE 0 END) as passed,
    SUM(CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END) as failed,
    SUM(CASE WHEN status = 'ERROR' THEN 1 ELSE 0 END) as errors,
    SUM(CASE WHEN status = 'SKIP' THEN 1 ELSE 0 END) as skipped,
    ROUND(100 * SUM(CASE WHEN status = 'PASS' THEN 1 ELSE 0 END) / COUNT(*), 1) as pass_rate,
    MAX(run_date) as last_run
FROM TEST_RESULTS
WHERE run_date >= TRUNC(SYSDATE)
GROUP BY test_suite;

-- View: Recent failures (backwards compatibility)
CREATE OR REPLACE VIEW V_TEST_FAILURES AS
SELECT 
    test_name,
    status,
    error_message as error_msg,
    run_date,
    execution_time_ms
FROM TEST_RESULTS
WHERE status IN ('FAIL', 'ERROR')
  AND run_date >= SYSDATE - 7
ORDER BY run_date DESC;

-- ============================================================================
-- Helper procedure to log enhanced test results
-- ============================================================================
CREATE OR REPLACE PROCEDURE log_test_result_enhanced(
    p_test_name IN VARCHAR2,
    p_data_flow_step IN VARCHAR2,
    p_test_category IN VARCHAR2,
    p_status IN VARCHAR2,
    p_failure_mode IN VARCHAR2 DEFAULT NULL,
    p_error_code IN VARCHAR2 DEFAULT NULL,
    p_error_message IN VARCHAR2 DEFAULT NULL,
    p_failed_procedure IN VARCHAR2 DEFAULT NULL,
    p_failed_at_line IN NUMBER DEFAULT NULL,
    p_test_parameters IN CLOB DEFAULT NULL,
    p_actual_result IN CLOB DEFAULT NULL,
    p_expected_result IN CLOB DEFAULT NULL,
    p_records_tested IN NUMBER DEFAULT NULL,
    p_records_failed IN NUMBER DEFAULT NULL,
    p_execution_time IN NUMBER DEFAULT NULL
) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO TEST_RESULTS (
        test_name, data_flow_step, test_category, status,
        failure_mode, error_code, error_message,
        failed_procedure, failed_at_line,
        test_parameters, actual_result, expected_result,
        records_tested, records_failed, execution_time_ms
    ) VALUES (
        p_test_name, p_data_flow_step, p_test_category, p_status,
        p_failure_mode, p_error_code, p_error_message,
        p_failed_procedure, p_failed_at_line,
        p_test_parameters, p_actual_result, p_expected_result,
        p_records_tested, p_records_failed, p_execution_time
    );
    COMMIT;
END log_test_result_enhanced;
/

PROMPT
PROMPT Enhanced test infrastructure tables created successfully:
PROMPT - TEST_RESULTS: Enhanced test result tracking with detailed failure analysis
PROMPT - TEMP_TEST_DATA: Temporary test data storage
PROMPT - V_TEST_BY_FLOW_STEP: Test results grouped by data flow step  
PROMPT - V_TEST_FAILURE_ANALYSIS: Failure pattern analysis
PROMPT - V_TEST_COVERAGE: Test coverage by category
PROMPT - V_TEST_SUMMARY: Test summary by suite (backwards compatible)
PROMPT - V_TEST_FAILURES: Recent failures (backwards compatible)
PROMPT - log_test_result_enhanced: Enhanced logging procedure
PROMPT