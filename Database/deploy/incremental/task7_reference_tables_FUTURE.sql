-- ===============================================================================
-- Incremental Update: Task 6 - Issue Reference Tables
-- Date: 2025-08-24
-- ===============================================================================
-- This script adds new tables for Task 6 without dropping existing objects
-- Safe to run multiple times - uses CREATE TABLE IF NOT EXISTS pattern
-- ===============================================================================

SET SERVEROUTPUT ON

PROMPT ===============================================================================
PROMPT Adding Issue Reference Tables (Task 6)
PROMPT ===============================================================================

-- Helper procedure to create table only if it doesn't exist
DECLARE
    PROCEDURE create_table_if_not_exists(p_ddl CLOB, p_table_name VARCHAR2) IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = UPPER(p_table_name);
        IF v_count = 0 THEN
            EXECUTE IMMEDIATE p_ddl;
            DBMS_OUTPUT.PUT_LINE('Created table: ' || p_table_name);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Table already exists: ' || p_table_name);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error creating ' || p_table_name || ': ' || SQLERRM);
    END;
BEGIN
    -- PCS_REFERENCES Table
    create_table_if_not_exists(
        'CREATE TABLE PCS_REFERENCES (
            reference_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            plant_id            VARCHAR2(50) NOT NULL,
            issue_revision      VARCHAR2(50) NOT NULL,
            pcs_id              VARCHAR2(100) NOT NULL,
            pcs_description     VARCHAR2(500),
            reference_type      VARCHAR2(50),
            is_valid            CHAR(1) DEFAULT ''Y'' CHECK (is_valid IN (''Y'', ''N'')),
            created_date        DATE DEFAULT SYSDATE,
            last_modified_date  DATE DEFAULT SYSDATE,
            CONSTRAINT UK_PCS_REF UNIQUE (plant_id, issue_revision, pcs_id),
            CONSTRAINT FK_PCS_REF_ISSUE FOREIGN KEY (plant_id, issue_revision) 
                REFERENCES ISSUES(plant_id, issue_revision)
        )',
        'PCS_REFERENCES'
    );
    
    -- VDS_REFERENCES Table
    create_table_if_not_exists(
        'CREATE TABLE VDS_REFERENCES (
            reference_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            plant_id            VARCHAR2(50) NOT NULL,
            issue_revision      VARCHAR2(50) NOT NULL,
            vds_id              VARCHAR2(100) NOT NULL,
            vds_description     VARCHAR2(500),
            reference_type      VARCHAR2(50),
            is_valid            CHAR(1) DEFAULT ''Y'' CHECK (is_valid IN (''Y'', ''N'')),
            created_date        DATE DEFAULT SYSDATE,
            last_modified_date  DATE DEFAULT SYSDATE,
            CONSTRAINT UK_VDS_REF UNIQUE (plant_id, issue_revision, vds_id),
            CONSTRAINT FK_VDS_REF_ISSUE FOREIGN KEY (plant_id, issue_revision) 
                REFERENCES ISSUES(plant_id, issue_revision)
        )',
        'VDS_REFERENCES'
    );
    
    -- Add more reference tables as needed...
END;
/

-- Add indexes (CREATE INDEX IF NOT EXISTS pattern)
DECLARE
    PROCEDURE create_index_if_not_exists(p_index_name VARCHAR2, p_ddl VARCHAR2) IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM user_indexes WHERE index_name = UPPER(p_index_name);
        IF v_count = 0 THEN
            EXECUTE IMMEDIATE p_ddl;
            DBMS_OUTPUT.PUT_LINE('Created index: ' || p_index_name);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Index already exists: ' || p_index_name);
        END IF;
    END;
BEGIN
    create_index_if_not_exists('IDX_PCS_REF_PLANT', 
        'CREATE INDEX IDX_PCS_REF_PLANT ON PCS_REFERENCES(plant_id)');
    create_index_if_not_exists('IDX_PCS_REF_ISSUE', 
        'CREATE INDEX IDX_PCS_REF_ISSUE ON PCS_REFERENCES(issue_revision)');
    create_index_if_not_exists('IDX_VDS_REF_PLANT', 
        'CREATE INDEX IDX_VDS_REF_PLANT ON VDS_REFERENCES(plant_id)');
    create_index_if_not_exists('IDX_VDS_REF_ISSUE', 
        'CREATE INDEX IDX_VDS_REF_ISSUE ON VDS_REFERENCES(issue_revision)');
END;
/

-- Add comments
COMMENT ON TABLE PCS_REFERENCES IS 'Piping Class Specification references for issues';
COMMENT ON TABLE VDS_REFERENCES IS 'Valve Datasheet references for issues';

-- Index documentation removed (INDEX_DOCUMENTATION table no longer needed)

COMMIT;

PROMPT
PROMPT ===============================================================================
PROMPT Incremental update complete
PROMPT ===============================================================================

-- Show new tables
SELECT table_name FROM user_tables 
WHERE table_name LIKE '%_REFERENCES'
ORDER BY table_name;

EXIT;