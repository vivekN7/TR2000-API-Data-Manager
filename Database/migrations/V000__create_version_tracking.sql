-- ===============================================================================
-- Migration V000: Create Version Tracking System
-- Author: System
-- Date: 2025-08-23
-- Description: Sets up schema versioning for proper migration tracking
-- ===============================================================================

-- Create schema version tracking table
CREATE TABLE schema_version (
    version_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    version VARCHAR2(20) NOT NULL,
    description VARCHAR2(500) NOT NULL,
    script_name VARCHAR2(200) NOT NULL,
    type VARCHAR2(20) DEFAULT 'MIGRATION' CHECK (type IN ('MIGRATION', 'ROLLBACK', 'HOTFIX')),
    checksum VARCHAR2(100),
    applied_date TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    applied_by VARCHAR2(50) DEFAULT USER NOT NULL,
    execution_time_ms NUMBER,
    success CHAR(1) DEFAULT 'Y' CHECK (success IN ('Y', 'N')),
    error_message VARCHAR2(4000),
    CONSTRAINT uk_schema_version UNIQUE (version, type)
);

-- Create index for faster lookups
CREATE INDEX idx_schema_version_date ON schema_version(applied_date DESC);
CREATE INDEX idx_schema_version_success ON schema_version(success);

-- Insert initial version record
INSERT INTO schema_version (version, description, script_name, type)
VALUES ('V000', 'Create version tracking system', 'V000__create_version_tracking.sql', 'MIGRATION');

-- Create helper view for current schema state
CREATE OR REPLACE VIEW v_schema_current_version AS
SELECT version, description, applied_date, applied_by
FROM schema_version
WHERE success = 'Y'
AND type = 'MIGRATION'
ORDER BY version_id DESC
FETCH FIRST 1 ROW ONLY;

-- Create procedure to record migrations
CREATE OR REPLACE PROCEDURE pr_record_migration (
    p_version VARCHAR2,
    p_description VARCHAR2,
    p_script_name VARCHAR2,
    p_type VARCHAR2 DEFAULT 'MIGRATION',
    p_success CHAR DEFAULT 'Y',
    p_error_message VARCHAR2 DEFAULT NULL
) AS
BEGIN
    INSERT INTO schema_version (
        version, description, script_name, type, 
        success, error_message
    ) VALUES (
        p_version, p_description, p_script_name, p_type,
        p_success, p_error_message
    );
    COMMIT;
END pr_record_migration;
/

-- Show current version
SELECT 'Version tracking system created. Current version: V000' AS status FROM dual;

COMMIT;