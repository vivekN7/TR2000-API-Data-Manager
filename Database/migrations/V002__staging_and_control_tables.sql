-- ===============================================================================
-- Migration V002: Create Staging and Control Tables
-- Author: System
-- Date: 2025-08-23
-- Description: Staging tables for JSON parsing and ETL control structures
-- Dependencies: V001
-- ===============================================================================

-- Record migration start
EXEC pr_record_migration('V002', 'Create staging and control tables', 'V002__staging_and_control_tables.sql');

-- ===============================================================================
-- Staging Tables
-- ===============================================================================

-- STG_PLANTS - Staging for Plants endpoint
CREATE TABLE STG_PLANTS (
    stg_plants_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    raw_json_id         NUMBER NOT NULL,
    operator_id         VARCHAR2(50),
    operator_name       VARCHAR2(255),
    plant_id            VARCHAR2(50),
    short_description   VARCHAR2(255),
    project             VARCHAR2(255),
    long_description    VARCHAR2(4000),
    common_lib_plant_code VARCHAR2(50),
    initial_revision    VARCHAR2(50),
    area_id             VARCHAR2(50),
    area                VARCHAR2(255),
    enable_embedded_note VARCHAR2(10),
    category_id         VARCHAR2(50),
    category            VARCHAR2(255),
    document_space_link VARCHAR2(500),
    enable_copy_pcs_from_plant VARCHAR2(10),
    over_length         VARCHAR2(10),
    pcs_qa              VARCHAR2(10),
    eds_mj              VARCHAR2(10),
    celsius_bar         VARCHAR2(10),
    web_info_text       VARCHAR2(4000),
    show_issues_from_common_lib_plant VARCHAR2(10),
    parsed_date         DATE DEFAULT SYSDATE NOT NULL
);

CREATE INDEX idx_stg_plants_raw ON STG_PLANTS(raw_json_id);

-- STG_ISSUES - Staging for Issues endpoint
CREATE TABLE STG_ISSUES (
    stg_issues_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    raw_json_id         NUMBER NOT NULL,
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    status              VARCHAR2(50),
    rev_date            VARCHAR2(50),
    protect_status      VARCHAR2(50),
    general_revision    VARCHAR2(50),
    general_rev_date    VARCHAR2(50),
    pcs_revision        VARCHAR2(50),
    pcs_rev_date        VARCHAR2(50),
    eds_revision        VARCHAR2(50),
    eds_rev_date        VARCHAR2(50),
    vds_revision        VARCHAR2(50),
    vds_rev_date        VARCHAR2(50),
    vsk_revision        VARCHAR2(50),
    vsk_rev_date        VARCHAR2(50),
    mds_revision        VARCHAR2(50),
    mds_rev_date        VARCHAR2(50),
    esk_revision        VARCHAR2(50),
    esk_rev_date        VARCHAR2(50),
    sc_revision         VARCHAR2(50),
    sc_rev_date         VARCHAR2(50),
    vsm_revision        VARCHAR2(50),
    vsm_rev_date        VARCHAR2(50),
    user_name           VARCHAR2(255),
    parsed_date         DATE DEFAULT SYSDATE NOT NULL
);

CREATE INDEX idx_stg_issues_raw ON STG_ISSUES(raw_json_id);

-- ===============================================================================
-- Control Tables
-- ===============================================================================

-- CONTROL_ENDPOINTS - Defines available endpoints
CREATE TABLE CONTROL_ENDPOINTS (
    endpoint_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    endpoint_key        VARCHAR2(100) NOT NULL UNIQUE,
    endpoint_url_pattern VARCHAR2(500) NOT NULL,
    endpoint_description VARCHAR2(500),
    processing_order    NUMBER NOT NULL,
    is_active           CHAR(1) DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y', 'N')),
    requires_plant      CHAR(1) DEFAULT 'N' NOT NULL CHECK (requires_plant IN ('Y', 'N')),
    requires_issue      CHAR(1) DEFAULT 'N' NOT NULL CHECK (requires_issue IN ('Y', 'N')),
    parse_procedure     VARCHAR2(100),
    upsert_procedure    VARCHAR2(100),
    created_date        DATE DEFAULT SYSDATE NOT NULL
);

CREATE INDEX idx_control_endpoints_active ON CONTROL_ENDPOINTS(is_active);
CREATE INDEX idx_control_endpoints_order ON CONTROL_ENDPOINTS(processing_order);

-- CONTROL_SETTINGS - Global ETL settings
CREATE TABLE CONTROL_SETTINGS (
    setting_key         VARCHAR2(100) PRIMARY KEY,
    setting_value       VARCHAR2(500),
    setting_description VARCHAR2(500),
    last_modified       DATE DEFAULT SYSDATE NOT NULL
);

-- CONTROL_ENDPOINT_STATE - Tracks last successful sync
CREATE TABLE CONTROL_ENDPOINT_STATE (
    state_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    endpoint_key        VARCHAR2(100) NOT NULL,
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    last_sync_timestamp TIMESTAMP,
    last_response_hash  VARCHAR2(64),
    sync_status         VARCHAR2(50),
    error_message       VARCHAR2(4000),
    created_date        DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT uk_endpoint_state UNIQUE (endpoint_key, plant_id, issue_revision)
);

CREATE INDEX idx_endpoint_state ON CONTROL_ENDPOINT_STATE(endpoint_key, sync_status);

-- ===============================================================================
-- ETL Monitoring Tables
-- ===============================================================================

-- ETL_RUN_LOG - Tracks ETL execution
CREATE TABLE ETL_RUN_LOG (
    run_id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_type            VARCHAR2(50) NOT NULL,
    endpoint_key        VARCHAR2(100),
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    start_time          TIMESTAMP NOT NULL,
    end_time            TIMESTAMP,
    duration_seconds    NUMBER,
    status              VARCHAR2(50) DEFAULT 'RUNNING',
    records_processed   NUMBER,
    records_inserted    NUMBER,
    records_updated     NUMBER,
    records_deleted     NUMBER,
    error_message       VARCHAR2(4000),
    notes               VARCHAR2(4000),
    initiated_by        VARCHAR2(50) DEFAULT USER,
    created_date        DATE DEFAULT SYSDATE NOT NULL
);

CREATE INDEX idx_etl_run_status ON ETL_RUN_LOG(status);
CREATE INDEX idx_etl_run_time ON ETL_RUN_LOG(start_time DESC);

-- ETL_ERROR_LOG - Detailed error tracking
CREATE TABLE ETL_ERROR_LOG (
    error_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_id              NUMBER,
    endpoint_key        VARCHAR2(100),
    plant_id            VARCHAR2(50),
    issue_revision      VARCHAR2(50),
    error_code          NUMBER,
    error_message       VARCHAR2(4000),
    error_stack         CLOB,
    error_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    error_context       VARCHAR2(500),
    created_date        DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT fk_error_run FOREIGN KEY (run_id) REFERENCES ETL_RUN_LOG(run_id)
);

CREATE INDEX idx_error_run ON ETL_ERROR_LOG(run_id);
CREATE INDEX idx_error_timestamp ON ETL_ERROR_LOG(error_timestamp DESC);

COMMIT;