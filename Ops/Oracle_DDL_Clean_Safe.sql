-- =====================================================
-- TR2000 Phase 3: Oracle ETL Implementation
-- Database: Oracle
-- Schema: TR2000_STAGING
-- Password: piping
-- Note: Clean table names without prefix since we're in a dedicated schema
-- 
-- SAFE VERSION: Handles cases where objects may not exist
-- IMPORTANT: This script will DROP and RECREATE all tables
-- Use this for clean deployment to production
-- =====================================================

-- =====================================================
-- 0. DROP ALL EXISTING OBJECTS (WITH ERROR HANDLING)
-- =====================================================

-- Create anonymous block to handle DROP errors
BEGIN
    -- Drop Views (ignore if they don't exist)
    BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_CURRENT_PCS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_CURRENT_ISSUES'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_CURRENT_PLANTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_CURRENT_OPERATORS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    
    -- Drop Reference Tables
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE PIPE_ELEMENT_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE ESK_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE VSK_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE MDS_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE EDS_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE VDS_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE VSM_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE SC_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE PCS_REFERENCES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    
    -- Drop List Tables
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE VDS_LIST CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE PCS_LIST CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    
    -- Drop Master Data Tables
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE ISSUES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE PLANTS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE OPERATORS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    
    -- Drop ETL Control Tables
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE ETL_ERROR_LOG CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE ETL_ENDPOINT_LOG CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE ETL_CONTROL CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/

-- =====================================================
-- 1. ETL CONTROL TABLES
-- =====================================================

-- ETL Control Table
CREATE TABLE ETL_CONTROL (
    ETL_RUN_ID         NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    RUN_DATE           DATE DEFAULT SYSDATE,
    RUN_TYPE           VARCHAR2(20),  -- 'FULL', 'INCREMENTAL', 'DELTA'
    STATUS             VARCHAR2(20),  -- 'RUNNING', 'SUCCESS', 'FAILED'
    RECORDS_EXTRACTED  NUMBER,
    RECORDS_LOADED     NUMBER,
    ERROR_COUNT        NUMBER,
    START_TIME         DATE,
    END_TIME           DATE,
    COMMENTS           VARCHAR2(4000)
);

-- Endpoint Processing Log
CREATE TABLE ETL_ENDPOINT_LOG (
    LOG_ID             NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ETL_RUN_ID         NUMBER,
    ENDPOINT_NAME      VARCHAR2(100),
    PLANT_ID           VARCHAR2(50),
    API_URL            VARCHAR2(500),
    RESPONSE_TIME_MS   NUMBER,
    RECORD_COUNT       NUMBER,
    STATUS             VARCHAR2(20),
    ERROR_MESSAGE      VARCHAR2(4000),
    PROCESSED_DATE     DATE DEFAULT SYSDATE,
    CONSTRAINT FK_ENDPOINT_ETL FOREIGN KEY (ETL_RUN_ID) 
        REFERENCES ETL_CONTROL(ETL_RUN_ID)
);

-- Error Log
CREATE TABLE ETL_ERROR_LOG (
    ERROR_ID           NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ETL_RUN_ID         NUMBER,
    ERROR_DATE         DATE DEFAULT SYSDATE,
    ERROR_TYPE         VARCHAR2(50),
    ERROR_MESSAGE      VARCHAR2(4000),
    STACK_TRACE        CLOB,
    ENDPOINT_NAME      VARCHAR2(100),
    RECORD_DATA        CLOB,
    CONSTRAINT FK_ERROR_ETL FOREIGN KEY (ETL_RUN_ID) 
        REFERENCES ETL_CONTROL(ETL_RUN_ID)
);

-- =====================================================
-- 2. MASTER DATA TABLES
-- =====================================================

-- Operators Table
CREATE TABLE OPERATORS (
    OPERATOR_ID        NUMBER NOT NULL,
    OPERATOR_NAME      VARCHAR2(200),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_OPERATORS PRIMARY KEY (OPERATOR_ID, EXTRACTION_DATE),
    CONSTRAINT CHK_OPERATORS_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- Plants Table
CREATE TABLE PLANTS (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    OPERATOR_ID        NUMBER,
    OPERATOR_NAME      VARCHAR2(200),
    SHORT_DESCRIPTION  VARCHAR2(100),
    PROJECT            VARCHAR2(100),
    LONG_DESCRIPTION   VARCHAR2(500),
    COMMON_LIB_PLANT_CODE VARCHAR2(20),  -- Increased from 10 to 20
    INITIAL_REVISION   VARCHAR2(20),
    AREA_ID            NUMBER,
    AREA               VARCHAR2(100),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_PLANTS PRIMARY KEY (PLANT_ID, EXTRACTION_DATE),
    CONSTRAINT CHK_PLANTS_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- Issues Table
CREATE TABLE ISSUES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_ISSUES PRIMARY KEY (PLANT_ID, ISSUE_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_ISSUES_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- =====================================================
-- 3. REFERENCE TABLES
-- =====================================================

-- PCS References
CREATE TABLE PCS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    PCS_NAME           VARCHAR2(100),
    PCS_REVISION       VARCHAR2(20),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_PCS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, PCS_NAME, PCS_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_PCS_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- SC References
CREATE TABLE SC_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    SC_NAME            VARCHAR2(100),
    SC_REVISION        VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_SC_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, SC_NAME, SC_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_SC_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- VSM References
CREATE TABLE VSM_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VSM_NAME           VARCHAR2(100),
    VSM_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_VSM_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VSM_NAME, VSM_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_VSM_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- VDS References
CREATE TABLE VDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VDS_NAME           VARCHAR2(100),
    VDS_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_VDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VDS_NAME, VDS_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_VDS_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- EDS References
CREATE TABLE EDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    EDS_NAME           VARCHAR2(100),
    EDS_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_EDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, EDS_NAME, EDS_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_EDS_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- MDS References
CREATE TABLE MDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    MDS_NAME           VARCHAR2(100),
    MDS_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    AREA               VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_MDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, MDS_NAME, MDS_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_MDS_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- VSK References
CREATE TABLE VSK_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VSK_NAME           VARCHAR2(100),
    VSK_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_VSK_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VSK_NAME, VSK_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_VSK_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- ESK References
CREATE TABLE ESK_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    ESK_NAME           VARCHAR2(100),
    ESK_REVISION       VARCHAR2(20),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_ESK_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, ESK_NAME, ESK_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_ESK_REF_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- Pipe Element References
CREATE TABLE PIPE_ELEMENT_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    ELEMENT_NAME       VARCHAR2(100),
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    DATE,
    USER_PROTECTED     CHAR(1),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_PIPE_ELEM_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, ELEMENT_NAME, EXTRACTION_DATE),
    CONSTRAINT CHK_PIPE_ELEM_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- PCS List/Details Tables
CREATE TABLE PCS_LIST (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    PCS_ID             VARCHAR2(100) NOT NULL,
    PCS_NAME           VARCHAR2(200),
    REVISION           VARCHAR2(20),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_PCS_LIST PRIMARY KEY (PLANT_ID, PCS_ID, REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_PCS_LIST_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- VDS List (Large dataset - 44K+ records)
CREATE TABLE VDS_LIST (
    VDS_NAME           VARCHAR2(100) NOT NULL,
    VDS_REVISION       VARCHAR2(20) NOT NULL,
    DESCRIPTION        VARCHAR2(500),
    ETL_RUN_ID         NUMBER,
    EXTRACTION_DATE    DATE DEFAULT SYSDATE,
    IS_CURRENT         CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_VDS_LIST PRIMARY KEY (VDS_NAME, VDS_REVISION, EXTRACTION_DATE),
    CONSTRAINT CHK_VDS_LIST_CURRENT CHECK (IS_CURRENT IN ('Y', 'N'))
);

-- =====================================================
-- 4. INDEXES FOR PERFORMANCE
-- =====================================================

-- Indexes on IS_CURRENT for faster queries
CREATE INDEX IDX_OPERATORS_CURRENT ON OPERATORS(IS_CURRENT);
CREATE INDEX IDX_PLANTS_CURRENT ON PLANTS(IS_CURRENT);
CREATE INDEX IDX_ISSUES_CURRENT ON ISSUES(IS_CURRENT);
CREATE INDEX IDX_PCS_REF_CURRENT ON PCS_REFERENCES(IS_CURRENT);
CREATE INDEX IDX_PCS_LIST_CURRENT ON PCS_LIST(IS_CURRENT);
CREATE INDEX IDX_VDS_LIST_CURRENT ON VDS_LIST(IS_CURRENT);

-- Indexes on ETL_RUN_ID for joins
CREATE INDEX IDX_OPERATORS_ETL ON OPERATORS(ETL_RUN_ID);
CREATE INDEX IDX_PLANTS_ETL ON PLANTS(ETL_RUN_ID);
CREATE INDEX IDX_ISSUES_ETL ON ISSUES(ETL_RUN_ID);

-- Indexes on foreign key relationships
CREATE INDEX IDX_PLANTS_OPERATOR ON PLANTS(OPERATOR_ID);
CREATE INDEX IDX_ISSUES_PLANT ON ISSUES(PLANT_ID);
CREATE INDEX IDX_PCS_REF_PLANT ON PCS_REFERENCES(PLANT_ID, ISSUE_REVISION);

-- =====================================================
-- 5. VIEWS FOR CURRENT DATA
-- =====================================================

-- Current Operators View
CREATE OR REPLACE VIEW VW_CURRENT_OPERATORS AS
SELECT OPERATOR_ID, OPERATOR_NAME, EXTRACTION_DATE
FROM OPERATORS
WHERE IS_CURRENT = 'Y';

-- Current Plants View
CREATE OR REPLACE VIEW VW_CURRENT_PLANTS AS
SELECT PLANT_ID, OPERATOR_ID, OPERATOR_NAME, SHORT_DESCRIPTION, 
       PROJECT, LONG_DESCRIPTION, COMMON_LIB_PLANT_CODE, 
       INITIAL_REVISION, AREA_ID, AREA, EXTRACTION_DATE
FROM PLANTS
WHERE IS_CURRENT = 'Y';

-- Current Issues View
CREATE OR REPLACE VIEW VW_CURRENT_ISSUES AS
SELECT PLANT_ID, ISSUE_REVISION, USER_NAME, 
       USER_ENTRY_TIME, USER_PROTECTED, EXTRACTION_DATE
FROM ISSUES
WHERE IS_CURRENT = 'Y';

-- Current PCS List View
CREATE OR REPLACE VIEW VW_CURRENT_PCS AS
SELECT PLANT_ID, PCS_ID, PCS_NAME, REVISION, EXTRACTION_DATE
FROM PCS_LIST
WHERE IS_CURRENT = 'Y';

-- =====================================================
-- 6. VERIFY INSTALLATION
-- =====================================================

-- Check all tables were created
SELECT TABLE_NAME FROM USER_TABLES 
WHERE TABLE_NAME IN (
    'ETL_CONTROL', 'ETL_ENDPOINT_LOG', 'ETL_ERROR_LOG',
    'OPERATORS', 'PLANTS', 'ISSUES',
    'PCS_REFERENCES', 'SC_REFERENCES', 'VSM_REFERENCES',
    'VDS_REFERENCES', 'EDS_REFERENCES', 'MDS_REFERENCES',
    'VSK_REFERENCES', 'ESK_REFERENCES', 'PIPE_ELEMENT_REFERENCES',
    'PCS_LIST', 'VDS_LIST'
)
ORDER BY TABLE_NAME;

-- Check all views were created
SELECT VIEW_NAME FROM USER_VIEWS
WHERE VIEW_NAME IN (
    'VW_CURRENT_OPERATORS', 'VW_CURRENT_PLANTS', 
    'VW_CURRENT_ISSUES', 'VW_CURRENT_PCS'
)
ORDER BY VIEW_NAME;

-- Verify PLANTS table has correct column size
SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH 
FROM USER_TAB_COLUMNS 
WHERE TABLE_NAME = 'PLANTS' 
AND COLUMN_NAME = 'COMMON_LIB_PLANT_CODE';

-- =====================================================
-- END OF SCRIPT
-- =====================================================