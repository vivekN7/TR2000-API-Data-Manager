-- =====================================================
-- TR2000 ORACLE STAGING DATABASE DDL SCRIPTS
-- Version: 1.0
-- Date: 2025-08-15
-- Description: Complete DDL for TR2000 staging database
-- =====================================================

-- =====================================================
-- SECTION 1: CLEANUP (Optional - for fresh install)
-- =====================================================
/*
-- Uncomment to drop all tables (BE CAREFUL!)
BEGIN
    FOR c IN (SELECT table_name FROM user_tables WHERE table_name LIKE 'STG_%' OR table_name LIKE 'ETL_%') LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || c.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;
/
*/

-- =====================================================
-- SECTION 2: ETL CONTROL TABLES
-- =====================================================

-- Main ETL control table
CREATE TABLE ETL_CONTROL (
    ETL_RUN_ID         NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    RUN_DATE           TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RUN_TYPE           VARCHAR2(20) CHECK (RUN_TYPE IN ('FULL', 'INCREMENTAL', 'DELTA', 'REPROCESS')),
    STATUS             VARCHAR2(20) CHECK (STATUS IN ('RUNNING', 'SUCCESS', 'FAILED', 'PARTIAL', 'ROLLED_BACK')),
    RECORDS_EXTRACTED  NUMBER DEFAULT 0,
    RECORDS_LOADED     NUMBER DEFAULT 0,
    RECORDS_REJECTED   NUMBER DEFAULT 0,
    ERROR_COUNT        NUMBER DEFAULT 0,
    WARNING_COUNT      NUMBER DEFAULT 0,
    START_TIME         TIMESTAMP,
    END_TIME           TIMESTAMP,
    DURATION_SECONDS   NUMBER GENERATED ALWAYS AS (
        CASE 
            WHEN END_TIME IS NOT NULL AND START_TIME IS NOT NULL 
            THEN EXTRACT(DAY FROM (END_TIME - START_TIME)) * 86400 + 
                 EXTRACT(HOUR FROM (END_TIME - START_TIME)) * 3600 + 
                 EXTRACT(MINUTE FROM (END_TIME - START_TIME)) * 60 + 
                 EXTRACT(SECOND FROM (END_TIME - START_TIME))
            ELSE NULL 
        END
    ) VIRTUAL,
    INITIATED_BY       VARCHAR2(100),
    COMMENTS           VARCHAR2(4000)
);

-- Endpoint processing log
CREATE TABLE ETL_ENDPOINT_LOG (
    LOG_ID             NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ETL_RUN_ID         NUMBER NOT NULL REFERENCES ETL_CONTROL(ETL_RUN_ID),
    ENDPOINT_NAME      VARCHAR2(100) NOT NULL,
    ENDPOINT_SECTION   VARCHAR2(100),
    PLANT_ID           VARCHAR2(50),
    API_URL            VARCHAR2(500),
    HTTP_STATUS_CODE   NUMBER,
    RESPONSE_TIME_MS   NUMBER,
    RESPONSE_SIZE_KB   NUMBER,
    RECORD_COUNT       NUMBER DEFAULT 0,
    STATUS             VARCHAR2(20) CHECK (STATUS IN ('SUCCESS', 'ERROR', 'WARNING', 'SKIPPED')),
    ERROR_MESSAGE      VARCHAR2(4000),
    RETRY_COUNT        NUMBER DEFAULT 0,
    PROCESSED_DATE     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX IDX_ETL_ENDPOINT_LOG_RUN ON ETL_ENDPOINT_LOG(ETL_RUN_ID);
CREATE INDEX IDX_ETL_ENDPOINT_LOG_STATUS ON ETL_ENDPOINT_LOG(STATUS, PROCESSED_DATE);

-- =====================================================
-- SECTION 3: MASTER DATA TABLES
-- =====================================================

-- Operators table
CREATE TABLE STG_OPERATORS (
    OPERATOR_ID        NUMBER NOT NULL,
    OPERATOR_NAME      VARCHAR2(200) NOT NULL,
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    IS_CURRENT         CHAR(1) DEFAULT 'Y' CHECK (IS_CURRENT IN ('Y', 'N')),
    VALID_FROM         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    VALID_TO           TIMESTAMP DEFAULT TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD'),
    HASH_VALUE         VARCHAR2(64), -- For change detection
    CONSTRAINT PK_STG_OPERATORS PRIMARY KEY (OPERATOR_ID, EXTRACTION_DATE)
);

-- Plants table with all fields from API
CREATE TABLE STG_PLANTS (
    PLANT_ID              VARCHAR2(50) NOT NULL,
    OPERATOR_ID           NUMBER,
    OPERATOR_NAME         VARCHAR2(200),
    SHORT_DESCRIPTION     VARCHAR2(100),
    PROJECT               VARCHAR2(100),
    LONG_DESCRIPTION      VARCHAR2(500),
    COMMON_LIB_PLANT_CODE VARCHAR2(50),
    INITIAL_REVISION      VARCHAR2(20),
    AREA_ID               NUMBER,
    AREA                  VARCHAR2(100),
    -- Extended fields from single plant endpoint
    ENABLE_EMBEDDED_NOTE  VARCHAR2(10),
    CATEGORY_ID           VARCHAR2(50),
    CATEGORY              VARCHAR2(100),
    DOCUMENT_SPACE_LINK   VARCHAR2(500),
    ENABLE_COPY_PCS       VARCHAR2(10),
    OVER_LENGTH           VARCHAR2(50),
    PCS_QA                VARCHAR2(50),
    EDS_MJ                VARCHAR2(50),
    CELSIUS_BAR           VARCHAR2(50),
    WEB_INFO_TEXT         VARCHAR2(4000),
    BOLT_TENSION_TEXT     VARCHAR2(4000),
    VISIBLE               VARCHAR2(10),
    WINDOWS_REMARK_TEXT   VARCHAR2(4000),
    USER_PROTECTED        VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID            NUMBER NOT NULL,
    EXTRACTION_DATE       TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    IS_CURRENT            CHAR(1) DEFAULT 'Y' CHECK (IS_CURRENT IN ('Y', 'N')),
    VALID_FROM            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    VALID_TO              TIMESTAMP DEFAULT TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD'),
    HASH_VALUE            VARCHAR2(64),
    CONSTRAINT PK_STG_PLANTS PRIMARY KEY (PLANT_ID, EXTRACTION_DATE)
);

-- =====================================================
-- SECTION 4: ISSUES AND REFERENCES
-- =====================================================

-- Issues master table
CREATE TABLE STG_ISSUES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    STATUS             VARCHAR2(10),
    REV_DATE           VARCHAR2(20),
    PROTECT_STATUS     VARCHAR2(10),
    -- All revision fields
    GENERAL_REVISION   VARCHAR2(20),
    GENERAL_REV_DATE   VARCHAR2(20),
    PCS_REVISION       VARCHAR2(20),
    PCS_REV_DATE       VARCHAR2(20),
    EDS_REVISION       VARCHAR2(20),
    EDS_REV_DATE       VARCHAR2(20),
    VDS_REVISION       VARCHAR2(20),
    VDS_REV_DATE       VARCHAR2(20),
    VSK_REVISION       VARCHAR2(20),
    VSK_REV_DATE       VARCHAR2(20),
    MDS_REVISION       VARCHAR2(20),
    MDS_REV_DATE       VARCHAR2(20),
    ESK_REVISION       VARCHAR2(20),
    ESK_REV_DATE       VARCHAR2(20),
    SC_REVISION        VARCHAR2(20),
    SC_REV_DATE        VARCHAR2(20),
    VSM_REVISION       VARCHAR2(20),
    VSM_REV_DATE       VARCHAR2(20),
    -- API header audit fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    IS_CURRENT         CHAR(1) DEFAULT 'Y' CHECK (IS_CURRENT IN ('Y', 'N')),
    HASH_VALUE         VARCHAR2(64),
    CONSTRAINT PK_STG_ISSUES PRIMARY KEY (PLANT_ID, ISSUE_REVISION, EXTRACTION_DATE)
);

-- PCS References
CREATE TABLE STG_PCS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    REVISION_SUFFIX    VARCHAR2(10),
    RATING_CLASS       VARCHAR2(50),
    MATERIAL_GROUP     VARCHAR2(50),
    HISTORICAL_PCS     VARCHAR2(100),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, PCS, REVISION, EXTRACTION_DATE)
);

-- SC References
CREATE TABLE STG_SC_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    SC                 VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_SC_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, SC, REVISION, EXTRACTION_DATE)
);

-- VSM References
CREATE TABLE STG_VSM_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VSM                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_VSM_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VSM, REVISION, EXTRACTION_DATE)
);

-- VDS References
CREATE TABLE STG_VDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VDS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_VDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VDS, REVISION, EXTRACTION_DATE)
);

-- EDS References
CREATE TABLE STG_EDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    EDS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_EDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, EDS, REVISION, EXTRACTION_DATE)
);

-- MDS References (includes Area field)
CREATE TABLE STG_MDS_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    MDS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    AREA               VARCHAR2(100),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_MDS_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, MDS, REVISION, EXTRACTION_DATE)
);

-- VSK References
CREATE TABLE STG_VSK_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    VSK                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_VSK_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, VSK, REVISION, EXTRACTION_DATE)
);

-- ESK References
CREATE TABLE STG_ESK_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    ESK                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    OFFICIAL_REVISION  VARCHAR2(20),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_ESK_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, ESK, REVISION, EXTRACTION_DATE)
);

-- Pipe Element References
CREATE TABLE STG_PIPE_ELEMENT_REFERENCES (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    ISSUE_REVISION     VARCHAR2(20) NOT NULL,
    ELEMENT_ID         NUMBER NOT NULL,
    ELEMENT_GROUP      VARCHAR2(100),
    DIMENSION_STANDARD VARCHAR2(100),
    PRODUCT_FORM       VARCHAR2(100),
    MATERIAL_GRADE     VARCHAR2(100),
    MDS                VARCHAR2(100),
    MDS_REVISION       VARCHAR2(20),
    AREA               VARCHAR2(100),
    REVISION           VARCHAR2(20),
    REV_DATE           VARCHAR2(20),
    STATUS             VARCHAR2(10),
    DELTA              VARCHAR2(10),
    -- API header fields
    USER_NAME          VARCHAR2(100),
    USER_ENTRY_TIME    VARCHAR2(50),
    USER_PROTECTED     VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PIPE_ELEM_REF PRIMARY KEY (PLANT_ID, ISSUE_REVISION, ELEMENT_ID, EXTRACTION_DATE)
);

-- =====================================================
-- SECTION 5: PCS TABLES
-- =====================================================

-- PCS Master Table
CREATE TABLE STG_PCS (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20) NOT NULL,
    STATUS             VARCHAR2(10),
    REV_DATE           VARCHAR2(20),
    RATING_CLASS       VARCHAR2(50),
    TEST_PRESSURE      VARCHAR2(50),
    MATERIAL_GROUP     VARCHAR2(50),
    DESIGN_CODE        VARCHAR2(50),
    LAST_UPDATE        VARCHAR2(50),
    LAST_UPDATE_BY     VARCHAR2(100),
    APPROVER           VARCHAR2(100),
    NOTEPAD            CLOB,
    SPECIAL_REQ_ID     NUMBER,
    TUBE_PCS           VARCHAR2(100),
    NEW_VDS_SECTION    VARCHAR2(100),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    IS_CURRENT         CHAR(1) DEFAULT 'Y' CHECK (IS_CURRENT IN ('Y', 'N')),
    HASH_VALUE         VARCHAR2(64),
    CONSTRAINT PK_STG_PCS PRIMARY KEY (PLANT_ID, PCS, REVISION, EXTRACTION_DATE)
);

-- PCS Details (Header and Properties)
CREATE TABLE STG_PCS_DETAILS (
    PLANT_ID                  VARCHAR2(50) NOT NULL,
    PCS                       VARCHAR2(100) NOT NULL,
    REVISION                  VARCHAR2(20) NOT NULL,
    -- Basic fields
    STATUS                    VARCHAR2(10),
    REV_DATE                  VARCHAR2(20),
    RATING_CLASS              VARCHAR2(50),
    TEST_PRESSURE             VARCHAR2(50),
    MATERIAL_GROUP            VARCHAR2(50),
    DESIGN_CODE               VARCHAR2(50),
    LAST_UPDATE               VARCHAR2(50),
    LAST_UPDATE_BY            VARCHAR2(100),
    APPROVER                  VARCHAR2(100),
    NOTEPAD                   CLOB,
    -- Additional header fields
    SC                        VARCHAR2(100),
    VSM                       VARCHAR2(100),
    DESIGN_CODE_REV_MARK      VARCHAR2(20),
    CORR_ALLOWANCE            NUMBER,
    CORR_ALLOWANCE_REV_MARK   VARCHAR2(20),
    LONG_WELD_EFF             VARCHAR2(50),
    LONG_WELD_EFF_REV_MARK    VARCHAR2(20),
    WALL_THK_TOL              VARCHAR2(50),
    WALL_THK_TOL_REV_MARK     VARCHAR2(20),
    SERVICE_REMARK            VARCHAR2(500),
    SERVICE_REMARK_REV_MARK   VARCHAR2(20),
    -- Design pressures
    DESIGN_PRESS_01           VARCHAR2(20),
    DESIGN_PRESS_02           VARCHAR2(20),
    DESIGN_PRESS_03           VARCHAR2(20),
    DESIGN_PRESS_04           VARCHAR2(20),
    DESIGN_PRESS_05           VARCHAR2(20),
    DESIGN_PRESS_06           VARCHAR2(20),
    DESIGN_PRESS_07           VARCHAR2(20),
    DESIGN_PRESS_08           VARCHAR2(20),
    DESIGN_PRESS_09           VARCHAR2(20),
    DESIGN_PRESS_10           VARCHAR2(20),
    DESIGN_PRESS_11           VARCHAR2(20),
    DESIGN_PRESS_12           VARCHAR2(20),
    DESIGN_PRESS_REV_MARK     VARCHAR2(20),
    -- Design temperatures
    DESIGN_TEMP_01            VARCHAR2(20),
    DESIGN_TEMP_02            VARCHAR2(20),
    DESIGN_TEMP_03            VARCHAR2(20),
    DESIGN_TEMP_04            VARCHAR2(20),
    DESIGN_TEMP_05            VARCHAR2(20),
    DESIGN_TEMP_06            VARCHAR2(20),
    DESIGN_TEMP_07            VARCHAR2(20),
    DESIGN_TEMP_08            VARCHAR2(20),
    DESIGN_TEMP_09            VARCHAR2(20),
    DESIGN_TEMP_10            VARCHAR2(20),
    DESIGN_TEMP_11            VARCHAR2(20),
    DESIGN_TEMP_12            VARCHAR2(20),
    DESIGN_TEMP_REV_MARK      VARCHAR2(20),
    -- Note IDs
    NOTE_ID_CORR_ALLOWANCE    VARCHAR2(50),
    NOTE_ID_SERVICE_CODE       VARCHAR2(50),
    NOTE_ID_WALL_THK_TOL       VARCHAR2(50),
    NOTE_ID_LONG_WELD_EFF      VARCHAR2(50),
    NOTE_ID_GENERAL_PCS        VARCHAR2(50),
    NOTE_ID_DESIGN_CODE        VARCHAR2(50),
    NOTE_ID_PRESS_TEMP_TABLE   VARCHAR2(50),
    NOTE_ID_PIPE_SIZE_TABLE    VARCHAR2(50),
    -- Other fields
    PRESS_ELEMENT_CHANGE       VARCHAR2(50),
    TEMP_ELEMENT_CHANGE        VARCHAR2(50),
    MATERIAL_GROUP_ID          NUMBER,
    SPECIAL_REQ_ID             NUMBER,
    SPECIAL_REQ                VARCHAR2(500),
    NEW_VDS_SECTION            VARCHAR2(100),
    TUBE_PCS                   VARCHAR2(100),
    EDS_MJ_MATRIX              VARCHAR2(100),
    MJ_REDUCTION_FACTOR        NUMBER,
    -- ETL metadata
    ETL_RUN_ID                 NUMBER NOT NULL,
    EXTRACTION_DATE            TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_DETAILS PRIMARY KEY (PLANT_ID, PCS, REVISION, EXTRACTION_DATE)
);

-- PCS Temperature and Pressure
CREATE TABLE STG_PCS_TEMP_PRESSURE (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20) NOT NULL,
    TEMPERATURE        VARCHAR2(50),
    PRESSURE           VARCHAR2(50),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_TEMP_PRESS PRIMARY KEY (PLANT_ID, PCS, REVISION, EXTRACTION_DATE)
);

-- PCS Pipe Sizes
CREATE TABLE STG_PCS_PIPE_SIZES (
    PLANT_ID              VARCHAR2(50) NOT NULL,
    PCS                   VARCHAR2(100) NOT NULL,
    REVISION              VARCHAR2(20) NOT NULL,
    NOM_SIZE              VARCHAR2(20) NOT NULL,
    OUTER_DIAM            VARCHAR2(20),
    WALL_THICKNESS        VARCHAR2(20),
    SCHEDULE              VARCHAR2(20),
    UNDER_TOLERANCE       VARCHAR2(20),
    CORROSION_ALLOWANCE   VARCHAR2(20),
    WELDING_FACTOR        VARCHAR2(20),
    DIM_ELEMENT_CHANGE    VARCHAR2(10),
    SCHEDULE_IN_MATRIX    VARCHAR2(20),
    -- ETL metadata
    ETL_RUN_ID            NUMBER NOT NULL,
    EXTRACTION_DATE       TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_SIZES PRIMARY KEY (PLANT_ID, PCS, REVISION, NOM_SIZE, EXTRACTION_DATE)
);

-- PCS Pipe Elements
CREATE TABLE STG_PCS_PIPE_ELEMENTS (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20) NOT NULL,
    ELEMENT_ID         NUMBER NOT NULL,
    MATERIAL_GROUP_ID  NUMBER,
    ELEMENT_GROUP_NO   NUMBER,
    LINE_NO            NUMBER,
    ELEMENT            VARCHAR2(200),
    DIM_STANDARD       VARCHAR2(100),
    FROM_SIZE          VARCHAR2(20),
    TO_SIZE            VARCHAR2(20),
    PRODUCT_FORM       VARCHAR2(100),
    MATERIAL           VARCHAR2(200),
    MDS                VARCHAR2(100),
    MDS_VARIANT        VARCHAR2(50),
    MDS_REVISION       VARCHAR2(20),
    AREA               VARCHAR2(100),
    EDS                VARCHAR2(100),
    EDS_REVISION       VARCHAR2(20),
    ESK                VARCHAR2(100),
    REVMARK            VARCHAR2(20),
    REMARK             VARCHAR2(500),
    PAGE_BREAK         VARCHAR2(10),
    FREE_TEXT          VARCHAR2(500),
    NOTE_ID            VARCHAR2(50),
    NEW_DELETED_LINE   VARCHAR2(10),
    INITIAL_INFO       VARCHAR2(100),
    INITIAL_REVMARK    VARCHAR2(20),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_PIPE_ELEM PRIMARY KEY (PLANT_ID, PCS, REVISION, ELEMENT_ID, LINE_NO, EXTRACTION_DATE)
);

-- PCS Valve Elements
CREATE TABLE STG_PCS_VALVE_ELEMENTS (
    PLANT_ID           VARCHAR2(50) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20) NOT NULL,
    VALVE_GROUP_NO     NUMBER NOT NULL,
    LINE_NO            NUMBER NOT NULL,
    VALVE_TYPE         VARCHAR2(100),
    VDS                VARCHAR2(100),
    VALVE_DESCRIPTION  VARCHAR2(500),
    FROM_SIZE          VARCHAR2(20),
    TO_SIZE            VARCHAR2(20),
    SIZE_RANGE         VARCHAR2(100),
    REVMARK            VARCHAR2(20),
    REMARK             VARCHAR2(500),
    PAGE_BREAK         VARCHAR2(10),
    NOTE_ID            VARCHAR2(50),
    PREVIOUS_VDS       VARCHAR2(100),
    NEW_DELETED_LINE   VARCHAR2(10),
    INITIAL_INFO       VARCHAR2(100),
    INITIAL_REVMARK    VARCHAR2(20),
    STATUS             VARCHAR2(10),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_VALVE_ELEM PRIMARY KEY (PLANT_ID, PCS, REVISION, VALVE_GROUP_NO, LINE_NO, EXTRACTION_DATE)
);

-- PCS Embedded Notes
CREATE TABLE STG_PCS_EMBEDDED_NOTES (
    PLANT_ID                VARCHAR2(50) NOT NULL,
    PCS_NAME                VARCHAR2(100) NOT NULL,
    REVISION                VARCHAR2(20) NOT NULL,
    TEXT_SECTION_ID         VARCHAR2(50) NOT NULL,
    TEXT_SECTION_DESCRIPTION VARCHAR2(500),
    PAGE_BREAK              VARCHAR2(10),
    HTML_CLOB               CLOB,
    -- ETL metadata
    ETL_RUN_ID              NUMBER NOT NULL,
    EXTRACTION_DATE         TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_PCS_NOTES PRIMARY KEY (PLANT_ID, PCS_NAME, REVISION, TEXT_SECTION_ID, EXTRACTION_DATE)
);

-- =====================================================
-- SECTION 6: VDS TABLES
-- =====================================================

-- VDS Master Table
CREATE TABLE STG_VDS (
    VDS                VARCHAR2(100) NOT NULL,
    REVISION           VARCHAR2(20) NOT NULL,
    STATUS             VARCHAR2(10),
    REV_DATE           VARCHAR2(20),
    LAST_UPDATE        VARCHAR2(50),
    LAST_UPDATE_BY     VARCHAR2(100),
    DESCRIPTION        VARCHAR2(500),
    NOTEPAD            CLOB,
    SPECIAL_REQ_ID     NUMBER,
    VALVE_TYPE_ID      NUMBER,
    RATING_CLASS_ID    NUMBER,
    MATERIAL_GROUP_ID  NUMBER,
    END_CONNECTION_ID  NUMBER,
    BORE_ID            NUMBER,
    VDS_SIZE_ID        NUMBER,
    SIZE_RANGE         VARCHAR2(100),
    CUSTOM_NAME        VARCHAR2(200),
    SUBSEGMENT_LIST    VARCHAR2(500),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    IS_CURRENT         CHAR(1) DEFAULT 'Y' CHECK (IS_CURRENT IN ('Y', 'N')),
    HASH_VALUE         VARCHAR2(64),
    CONSTRAINT PK_STG_VDS PRIMARY KEY (VDS, REVISION, EXTRACTION_DATE)
);

-- VDS Subsegments
CREATE TABLE STG_VDS_SUBSEGMENTS (
    VDS                        VARCHAR2(100) NOT NULL,
    REVISION                   VARCHAR2(20) NOT NULL,
    SUBSEGMENT_ID              NUMBER NOT NULL,
    SUBSEGMENT_NAME            VARCHAR2(200),
    SEQUENCE                   NUMBER,
    VALVE_TYPE_ID              NUMBER,
    RATING_CLASS_ID            NUMBER,
    MATERIAL_TYPE_ID           NUMBER,
    END_CONNECTION_ID          NUMBER,
    FULL_REDUCED_BORE_IND      VARCHAR2(10),
    BORE_ID                    NUMBER,
    VDS_SIZE_ID                NUMBER,
    HOUSING_DESIGN_IND         VARCHAR2(10),
    HOUSING_DESIGN_ID          NUMBER,
    SPECIAL_REQ_ID             NUMBER,
    MIN_OPERATING_TEMP         NUMBER,
    MAX_OPERATING_TEMP         NUMBER,
    VDS_DESCRIPTION            VARCHAR2(500),
    NOTEPAD                    CLOB,
    REV_DATE                   VARCHAR2(20),
    LAST_UPDATE                VARCHAR2(50),
    LAST_UPDATE_BY             VARCHAR2(100),
    -- ETL metadata
    ETL_RUN_ID                 NUMBER NOT NULL,
    EXTRACTION_DATE            TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_VDS_SUBSEG PRIMARY KEY (VDS, REVISION, SUBSEGMENT_ID, EXTRACTION_DATE)
);

-- =====================================================
-- SECTION 7: BOLT TENSION TABLES
-- =====================================================

-- Bolt Tension Flange Type
CREATE TABLE STG_BOLT_FLANGE_TYPE (
    PLANT_CODE         VARCHAR2(20) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    FLANGE_SIZE        NUMBER NOT NULL,
    FLANGE_TYPE_ID     NUMBER,
    DISPLAY            VARCHAR2(200),
    COMPONENT_TYPE     VARCHAR2(100),
    FLANGE_OR_MECHJOINT VARCHAR2(50),
    RATING_CLASS       VARCHAR2(50),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_BOLT_FLANGE PRIMARY KEY (PLANT_CODE, PCS, FLANGE_SIZE, EXTRACTION_DATE)
);

-- Bolt Tension Gasket Type
CREATE TABLE STG_BOLT_GASKET_TYPE (
    PLANT_CODE         VARCHAR2(20) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    FLANGE_TYPE_ID     NUMBER NOT NULL,
    FLANGE_SIZE        NUMBER NOT NULL,
    GASKET_ID          NUMBER,
    DISPLAY            VARCHAR2(200),
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_BOLT_GASKET PRIMARY KEY (PLANT_CODE, PCS, FLANGE_TYPE_ID, FLANGE_SIZE, EXTRACTION_DATE)
);

-- Bolt Tension Forces
CREATE TABLE STG_BOLT_TENSION_FORCES (
    PLANT_CODE         VARCHAR2(20) NOT NULL,
    PCS                VARCHAR2(100) NOT NULL,
    FLANGE_TYPE_ID     NUMBER NOT NULL,
    GASKET_TYPE_ID     NUMBER NOT NULL,
    BOLT_MATERIAL_ID   NUMBER NOT NULL,
    FLANGE_SIZE        NUMBER NOT NULL,
    COMPONENT_TYPE     VARCHAR2(100) NOT NULL,
    LUBRICANT_ID       NUMBER NOT NULL,
    NO_OF_BOLTS        NUMBER,
    BOLT_DIAMETER      VARCHAR2(50),
    BOLT_DIAMETER_DISP VARCHAR2(50),
    NUT_NOM_SIZE       VARCHAR2(50),
    KN                 NUMBER,
    NM                 NUMBER,
    -- ETL metadata
    ETL_RUN_ID         NUMBER NOT NULL,
    EXTRACTION_DATE    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_STG_BOLT_FORCES PRIMARY KEY (PLANT_CODE, PCS, FLANGE_TYPE_ID, GASKET_TYPE_ID, 
                                                BOLT_MATERIAL_ID, FLANGE_SIZE, EXTRACTION_DATE)
);

-- =====================================================
-- SECTION 8: DATA QUALITY TABLES
-- =====================================================

-- Validation Rules
CREATE TABLE ETL_VALIDATION_RULES (
    RULE_ID            NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TABLE_NAME         VARCHAR2(100) NOT NULL,
    COLUMN_NAME        VARCHAR2(100),
    RULE_TYPE          VARCHAR2(50) CHECK (RULE_TYPE IN ('NOT_NULL', 'UNIQUE', 'RANGE', 
                                                          'REGEX', 'REFERENTIAL', 'CUSTOM')),
    RULE_EXPRESSION    VARCHAR2(1000),
    ERROR_SEVERITY     VARCHAR2(20) CHECK (ERROR_SEVERITY IN ('ERROR', 'WARNING', 'INFO')),
    ERROR_MESSAGE      VARCHAR2(500),
    IS_ACTIVE          CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_DATE       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY         VARCHAR2(100)
);

-- Validation Results
CREATE TABLE ETL_VALIDATION_RESULTS (
    RESULT_ID          NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ETL_RUN_ID         NUMBER NOT NULL REFERENCES ETL_CONTROL(ETL_RUN_ID),
    RULE_ID            NUMBER NOT NULL REFERENCES ETL_VALIDATION_RULES(RULE_ID),
    TABLE_NAME         VARCHAR2(100),
    RECORD_KEY         VARCHAR2(500),
    VALIDATION_STATUS  VARCHAR2(20) CHECK (VALIDATION_STATUS IN ('PASSED', 'FAILED', 'WARNING')),
    ERROR_DETAILS      VARCHAR2(4000),
    VALIDATED_DATE     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- SECTION 9: AUDIT AND MONITORING
-- =====================================================

-- Audit Log
CREATE TABLE ETL_AUDIT_LOG (
    AUDIT_ID           NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ACTION_TYPE        VARCHAR2(50),
    TABLE_NAME         VARCHAR2(100),
    OPERATION          VARCHAR2(20) CHECK (OPERATION IN ('INSERT', 'UPDATE', 'DELETE', 'TRUNCATE')),
    RECORD_COUNT       NUMBER,
    USER_NAME          VARCHAR2(100),
    ACTION_DATE        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IP_ADDRESS         VARCHAR2(50),
    SESSION_ID         VARCHAR2(100),
    COMMENTS           VARCHAR2(4000)
);

-- Alert Configuration
CREATE TABLE ETL_ALERT_CONFIG (
    ALERT_ID           NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ALERT_NAME         VARCHAR2(100) NOT NULL,
    ALERT_TYPE         VARCHAR2(50) CHECK (ALERT_TYPE IN ('ERROR_COUNT', 'DURATION_EXCEEDED', 
                                                           'NO_DATA', 'VALIDATION_FAILED')),
    THRESHOLD_VALUE    NUMBER,
    THRESHOLD_OPERATOR VARCHAR2(10) CHECK (THRESHOLD_OPERATOR IN ('>', '<', '>=', '<=', '=', '!=')),
    EMAIL_RECIPIENTS   VARCHAR2(1000),
    SMS_RECIPIENTS     VARCHAR2(500),
    IS_ACTIVE          CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CHECK_FREQUENCY    VARCHAR2(50),
    LAST_TRIGGERED     TIMESTAMP,
    CREATED_DATE       TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- SECTION 10: PERFORMANCE INDEXES
-- =====================================================

-- Indexes for current data queries
CREATE INDEX IDX_STG_OPERATORS_CURRENT ON STG_OPERATORS(IS_CURRENT, OPERATOR_ID);
CREATE INDEX IDX_STG_PLANTS_CURRENT ON STG_PLANTS(IS_CURRENT, PLANT_ID);
CREATE INDEX IDX_STG_ISSUES_CURRENT ON STG_ISSUES(IS_CURRENT, PLANT_ID, ISSUE_REVISION);
CREATE INDEX IDX_STG_PCS_CURRENT ON STG_PCS(IS_CURRENT, PLANT_ID, PCS);
CREATE INDEX IDX_STG_VDS_CURRENT ON STG_VDS(IS_CURRENT, VDS);

-- Indexes for ETL processing
CREATE INDEX IDX_STG_PLANTS_ETL ON STG_PLANTS(ETL_RUN_ID, EXTRACTION_DATE);
CREATE INDEX IDX_STG_ISSUES_ETL ON STG_ISSUES(ETL_RUN_ID, EXTRACTION_DATE);
CREATE INDEX IDX_STG_PCS_ETL ON STG_PCS(ETL_RUN_ID, EXTRACTION_DATE);

-- Indexes for relationships
CREATE INDEX IDX_STG_ISSUES_PLANT ON STG_ISSUES(PLANT_ID);
CREATE INDEX IDX_STG_PCS_REF_ISSUE ON STG_PCS_REFERENCES(PLANT_ID, ISSUE_REVISION);
CREATE INDEX IDX_STG_PCS_DETAILS_PCS ON STG_PCS_DETAILS(PLANT_ID, PCS, REVISION);

-- =====================================================
-- SECTION 11: VIEWS FOR REPORTING
-- =====================================================

-- Current data views
CREATE OR REPLACE VIEW V_CURRENT_PLANTS AS
SELECT * FROM STG_PLANTS 
WHERE IS_CURRENT = 'Y';

CREATE OR REPLACE VIEW V_CURRENT_ISSUES AS
SELECT * FROM STG_ISSUES 
WHERE IS_CURRENT = 'Y';

CREATE OR REPLACE VIEW V_CURRENT_PCS AS
SELECT * FROM STG_PCS 
WHERE IS_CURRENT = 'Y';

-- ETL Dashboard view
CREATE OR REPLACE VIEW V_ETL_DASHBOARD AS
SELECT 
    ETL_RUN_ID,
    RUN_DATE,
    RUN_TYPE,
    STATUS,
    RECORDS_EXTRACTED,
    RECORDS_LOADED,
    RECORDS_REJECTED,
    ERROR_COUNT,
    WARNING_COUNT,
    ROUND(DURATION_SECONDS / 60, 2) AS DURATION_MINUTES,
    INITIATED_BY,
    COMMENTS
FROM ETL_CONTROL
ORDER BY ETL_RUN_ID DESC;

-- Endpoint performance view
CREATE OR REPLACE VIEW V_ENDPOINT_PERFORMANCE AS
SELECT 
    ENDPOINT_NAME,
    COUNT(*) AS CALL_COUNT,
    AVG(RESPONSE_TIME_MS) AS AVG_RESPONSE_MS,
    MAX(RESPONSE_TIME_MS) AS MAX_RESPONSE_MS,
    SUM(RECORD_COUNT) AS TOTAL_RECORDS,
    SUM(CASE WHEN STATUS = 'ERROR' THEN 1 ELSE 0 END) AS ERROR_COUNT,
    MAX(PROCESSED_DATE) AS LAST_PROCESSED
FROM ETL_ENDPOINT_LOG
GROUP BY ENDPOINT_NAME;

-- =====================================================
-- SECTION 12: STORED PROCEDURES
-- =====================================================

-- Procedure to start ETL run
CREATE OR REPLACE PROCEDURE SP_START_ETL_RUN(
    p_run_type IN VARCHAR2,
    p_initiated_by IN VARCHAR2,
    p_etl_run_id OUT NUMBER
) AS
BEGIN
    INSERT INTO ETL_CONTROL (
        RUN_TYPE, 
        STATUS, 
        START_TIME, 
        INITIATED_BY
    ) VALUES (
        p_run_type, 
        'RUNNING', 
        CURRENT_TIMESTAMP, 
        p_initiated_by
    ) RETURNING ETL_RUN_ID INTO p_etl_run_id;
    
    COMMIT;
END SP_START_ETL_RUN;
/

-- Procedure to complete ETL run
CREATE OR REPLACE PROCEDURE SP_COMPLETE_ETL_RUN(
    p_etl_run_id IN NUMBER,
    p_status IN VARCHAR2,
    p_records_extracted IN NUMBER,
    p_records_loaded IN NUMBER,
    p_error_count IN NUMBER
) AS
BEGIN
    UPDATE ETL_CONTROL 
    SET STATUS = p_status,
        END_TIME = CURRENT_TIMESTAMP,
        RECORDS_EXTRACTED = p_records_extracted,
        RECORDS_LOADED = p_records_loaded,
        ERROR_COUNT = p_error_count
    WHERE ETL_RUN_ID = p_etl_run_id;
    
    COMMIT;
END SP_COMPLETE_ETL_RUN;
/

-- Procedure to apply SCD Type 2
CREATE OR REPLACE PROCEDURE SP_APPLY_SCD2_PLANTS(
    p_etl_run_id IN NUMBER
) AS
BEGIN
    -- Close previous current records where data has changed
    UPDATE STG_PLANTS OLD
    SET IS_CURRENT = 'N',
        VALID_TO = CURRENT_TIMESTAMP
    WHERE IS_CURRENT = 'Y'
    AND EXISTS (
        SELECT 1 
        FROM STG_PLANTS NEW
        WHERE NEW.PLANT_ID = OLD.PLANT_ID
        AND NEW.ETL_RUN_ID = p_etl_run_id
        AND NEW.HASH_VALUE != OLD.HASH_VALUE
    );
    
    COMMIT;
END SP_APPLY_SCD2_PLANTS;
/

-- =====================================================
-- SECTION 13: GRANTS (Adjust as needed)
-- =====================================================

-- Create role for ETL processing
-- CREATE ROLE ETL_PROCESSOR;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES TO ETL_PROCESSOR;
-- GRANT EXECUTE ON ALL PROCEDURES TO ETL_PROCESSOR;

-- Create role for read-only access
-- CREATE ROLE ETL_READER;
-- GRANT SELECT ON ALL TABLES TO ETL_READER;
-- GRANT SELECT ON ALL VIEWS TO ETL_READER;

-- =====================================================
-- END OF DDL SCRIPT
-- =====================================================

-- Verification query
SELECT 'Tables Created' AS STATUS, COUNT(*) AS COUNT 
FROM USER_TABLES 
WHERE TABLE_NAME LIKE 'STG_%' OR TABLE_NAME LIKE 'ETL_%';