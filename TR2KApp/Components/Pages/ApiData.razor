@page "/api-data"
@rendermode InteractiveServer
@using TR2KBlazorLibrary.Logic.Services
@using TR2KBlazorLibrary.Models
@using TR2KBlazorLibrary.Models.DatabaseModels
@using System.Text
@inject TR2000ApiService ApiService
@inject DataImportService ImportService
@inject ApiResponseDeserializer Deserializer
@inject IJSRuntime JS

<PageTitle>TR2000 API Data</PageTitle>

<h1>TR2000 API Data Manager</h1>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Import TR2000 Data</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">1. Select Endpoint:</label>
                    <select class="form-select" @bind="SelectedEndpointKey" @bind:after="OnEndpointChanged" disabled="@IsLoading">
                        <option value="">Choose endpoint...</option>
                        @foreach (var group in EndpointRegistry.AllEndpoints.GroupBy(e => e.Section))
                        {
                            <optgroup label="@group.Key">
                                @foreach (var endpoint in group)
                                {
                                    <option value="@endpoint.Key">@endpoint.Name - @endpoint.Description</option>
                                }
                            </optgroup>
                        }
                    </select>
                </div>
                
                @if (SelectedEndpoint != null && SelectedEndpoint.Parameters.Any())
                {
                    <div class="mb-3">
                        <label class="form-label">2. Enter Parameters:</label>
                        <div class="row">
                        @foreach (var param in SelectedEndpoint.Parameters)
                            {
                                <div class="col-md-4">
                                    <label class="form-label small">
                                        @param.DisplayName
                                        @if (param.IsRequired)
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </label>
                                    @if (param.Type == "dropdown" && param.DropdownSource != null)
                                    {
                                        <select class="form-select form-select-sm" 
                                                value="@GetParameterValue(param.Name)"
                                                @onchange="@(async e => await SetParameterValue(param.Name, e.Value?.ToString() ?? ""))"
                                                disabled="@(IsLoading || !DropdownData.ContainsKey(param.DropdownSource) || (param.DependsOn != null && string.IsNullOrEmpty(GetParameterValue(param.DependsOn))))">
                                            <option value="">Choose...</option>
                                            @if (DropdownData.ContainsKey(param.DropdownSource))
                                            {
                                                var items = GetUniqueAndSortedDropdownItems(param);
                                                @foreach (var item in items)
                                                {
                                                    <option value="@item.Value">@item.Display</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else if (param.Type == "int")
                                    {
                                        <input type="number" class="form-control form-control-sm" 
                                               value="@GetParameterValue(param.Name)"
                                               @onchange="@(async e => await SetParameterValue(param.Name, e.Value?.ToString() ?? ""))"
                                               placeholder="Enter @param.DisplayName" 
                                               disabled="@IsLoading" />
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control form-control-sm" 
                                               value="@GetParameterValue(param.Name)"
                                               @onchange="@(async e => await SetParameterValue(param.Name, e.Value?.ToString() ?? ""))"
                                               placeholder="Enter @param.DisplayName" 
                                               disabled="@IsLoading" />
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                
                <div class="mb-3">
                    <button class="btn btn-primary me-2" 
                            @onclick="TestConnection" 
                            disabled="@(!CanImport() || IsLoading)">
                        @(IsTesting ? "Testing..." : "Test Connection")
                    </button>
                    <button class="btn btn-success" 
                            @onclick="ImportData" 
                            disabled="@(!CanImport() || IsLoading)">
                        @(IsImporting ? "Importing..." : "Import Data")
                    </button>
                    
                    @if (ShowViewData)
                    {
                        <button class="btn btn-warning ms-2" @onclick="ExportToCsv" disabled="@IsLoading">
                            Export to CSV
                        </button>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="alert @GetAlertClass()" role="alert">
                        @StatusMessage
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        @if (SelectedEndpoint != null)
        {
            <div class="card">
                <div class="card-header">
                    <h6>Endpoint Details for: '@SelectedEndpoint.Name'</h6>
                </div>
                <div class="card-body p-2" style="font-size: 0.8rem;">
                    <div class="mb-1">
                        <strong>Template:</strong> <code class="text-info small">/@SelectedEndpoint.Endpoint | @SelectedEndpoint.HttpMethod</code>
                    </div>
                    @if (SelectedEndpoint.Parameters.Any())
                    {
                        <div class="mb-1">
                            <strong>Generated:</strong> <code class="text-primary small">/@GetFinalEndpoint()</code>
                        </div>
                        <div class="mb-1">
                            <strong>API URL:</strong> <a href="@($"https://equinor.pipespec-api.presight.com/{GetFinalEndpoint()}")" target="_blank" class="text-decoration-none">
                                <code class="text-success small">https://equinor.pipespec-api.presight.com/@GetFinalEndpoint()</code>
                            </a>
                        </div>
                    }
                    <div class="row mb-1">
                        <div class="col-5">
                            <strong>Table:</strong><br>
                            <code class="small">@SelectedEndpoint.TableName</code>
                        </div>
                        @if (!string.IsNullOrEmpty(SelectedEndpoint.Description))
                        {
                            <div class="col-7">
                                <strong>Description:</strong><br>
                                <small class="text-muted">@SelectedEndpoint.Description</small>
                            </div>
                        }
                    </div>
                    @if (SelectedEndpoint.Parameters.Any())
                    {
                        <div class="mb-1">
                            <strong>Params:</strong>
                            <span class="ms-1 font-monospace small">
                                @foreach (var param in SelectedEndpoint.Parameters)
                                {
                                    <span>@param.Name=[@(param.Type == "int" ? "Int32" : "String")]</span>
                                }
                            </span>
                        </div>
                    }
                    @if (SelectedEndpoint.ResponseFields.Any())
                    {
                        <div>
                            <strong>Returns (@SelectedEndpoint.ResponseFields.Count fields):</strong>
                            <div class="font-monospace" style="background: #f8f9fa; padding: 3px 5px; border-radius: 2px; margin-top: 2px; font-size: 0.75rem; line-height: 1.2;">
                                @foreach (var field in SelectedEndpoint.ResponseFields)
                                {
                                    <div style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@field.Name=@field.Type</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@if (ShowViewData && SelectedEndpoint != null)
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>Imported Data from '@(SelectedEndpoint?.TableName)' 
                            @if (!IsLoading && ImportedData != null)
                            {
                                <span>(@(FilteredData?.Count() ?? 0) filtered / @ImportedData.Count() total)</span>
                            }
                        </h5>
                        <div class="d-flex gap-2">
                            <input type="text" class="form-control form-control-sm" style="width: 250px;" 
                                   placeholder="Search all columns..." 
                                   @bind="SearchText" 
                                   @bind:event="oninput"
                                   @bind:after="ApplyFilter" 
                                   disabled="@IsLoading" />
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilter" disabled="@IsLoading">Clear</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="text-muted">@LoadingMessage</div>
                            <div class="text-muted small mt-2">Please wait, this may take a moment...</div>
                        </div>
                    }
                    else if (ImportedData != null && ImportedData.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        @foreach (var column in GetTableColumns())
                                        {
                                            <th style="cursor: pointer; user-select: none;" @onclick="() => SortByColumn(column)">
                                                @column
                                                @if (SortColumn == column)
                                                {
                                                    <span class="ms-1">@(SortAscending ? "▲" : "▼")</span>
                                                }
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var row in GetPagedData())
                                    {
                                        <tr>
                                            @foreach (var column in GetTableColumns())
                                            {
                                                <td>@GetCellValue(row, column)</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else if (!IsLoading)
                    {
                        <div class="text-center py-5 text-muted">
                            <p>No data available. Please import data first.</p>
                        </div>
                    }
                    @if (!IsLoading && ImportedData != null && ImportedData.Any() && GetTotalPages() > 1)
                    {
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div>
                                Showing @((CurrentPage - 1) * PageSize + 1) to @Math.Min(CurrentPage * PageSize, FilteredData?.Count() ?? 0) of @(FilteredData?.Count() ?? 0) records
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-2" 
                                        @onclick="PreviousPage" 
                                        disabled="@(CurrentPage == 1)">
                                    Previous
                                </button>
                                <span class="mx-2">Page @CurrentPage of @GetTotalPages()</span>
                                <button class="btn btn-sm btn-outline-primary ms-2" 
                                        @onclick="NextPage" 
                                        disabled="@(CurrentPage >= GetTotalPages())">
                                    Next
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string SelectedEndpointKey = "";
    private EndpointConfiguration? SelectedEndpoint = null;
    private Dictionary<string, string> ParameterValues = new();
    private Dictionary<string, IEnumerable<dynamic>> DropdownData = new();
    private string StatusMessage = "";
    private string LoadingMessage = "";
    private bool IsLoading => IsTesting || IsImporting || IsLoadingDropdowns;
    private bool IsTesting = false;
    private bool IsImporting = false;
    private bool IsLoadingDropdowns = false;
    private bool ShowViewData = false;
    private IEnumerable<dynamic>? ImportedData = null;
    private IEnumerable<dynamic>? FilteredData = null;
    private int CurrentPage = 1;
    private int PageSize = 100;
    private string SearchText = "";
    private string SortColumn = "";
    private bool SortAscending = true;
    
    private async Task TestConnection()
    {
        var endpoint = GetFinalEndpoint();
        if (string.IsNullOrEmpty(endpoint)) return;
        
        IsTesting = true;
        LoadingMessage = "Testing connection...";
        StatusMessage = "";
        StateHasChanged();
        
        try
        {
            var result = await ApiService.TestConnectionAsync(endpoint);
            StatusMessage = result.Success 
                ? $"✅ Connected! Found {result.RecordCount} records."
                : $"❌ Failed: {result.ErrorMessage}";
        }
        catch (Exception ex)
        {
            StatusMessage = $"❌ Error: {ex.Message}";
        }
        finally
        {
            IsTesting = false;
            StateHasChanged();
        }
    }
    
    private async Task ImportData()
    {
        var endpoint = GetFinalEndpoint();
        if (string.IsNullOrEmpty(endpoint)) return;
        
        // Debug logging
        Console.WriteLine($"Importing endpoint: {endpoint}");
        foreach (var kv in ParameterValues)
        {
            Console.WriteLine($"Parameter {kv.Key} = {kv.Value}");
        }
        
        // Clear existing data immediately to show loading state
        ImportedData = null;
        FilteredData = null;
        ShowViewData = true; // Show the data section with loading spinner
        
        IsImporting = true;
        LoadingMessage = "Importing data from API...";
        StatusMessage = "";
        StateHasChanged();
        
        try
        {
            var result = await ImportService.ImportDataAsync(endpoint, overwriteExisting: true);
            if (result.Success)
            {
                StatusMessage = $"✅ Imported {result.RecordsImported} records successfully into '{SelectedEndpoint?.TableName}' table!";
                ShowViewData = true;
                await LoadImportedData();
            }
            else
            {
                StatusMessage = $"❌ Import failed: {result.ErrorMessage}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"❌ Error: {ex.Message}";
        }
        finally
        {
            IsImporting = false;
            StateHasChanged();
        }
    }
    
    private string GetAlertClass()
    {
        if (StatusMessage.StartsWith("✅")) return "alert-success";
        if (StatusMessage.StartsWith("❌")) return "alert-danger";
        return "alert-info";
    }
    
    private async Task ExportToCsv()
    {
        if (ImportedData == null || !ImportedData.Any())
        {
            StatusMessage = "⚠️ No data to export!";
            return;
        }
        
        try
        {
            var csv = new StringBuilder();
            var columns = GetTableColumns().ToList();
            
            // Add headers
            csv.AppendLine(string.Join(",", columns.Select(c => $"\"{c}\"")));
            
            // Add data rows
            foreach (var row in ImportedData)
            {
                var values = columns.Select(col => 
                {
                    var value = GetCellValue(row, col)?.ToString() ?? "";
                    // Escape quotes and wrap in quotes if contains comma or quotes
                    if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
                    {
                        value = "\"" + value.Replace("\"", "\"\"") + "\"";
                    }
                    return value;
                });
                csv.AppendLine(string.Join(",", values));
            }
            
            // Download the CSV file
            var fileName = $"{SelectedEndpoint?.TableName}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            var bytes = Encoding.UTF8.GetBytes(csv.ToString());
            var base64 = Convert.ToBase64String(bytes);
            
            await JS.InvokeVoidAsync("downloadFile", fileName, base64, "text/csv");
            StatusMessage = $"✅ Exported {ImportedData.Count()} records to {fileName}";
        }
        catch (Exception ex)
        {
            StatusMessage = $"❌ Export failed: {ex.Message}";
        }
    }
    
    private async Task LoadImportedData()
    {
        if (SelectedEndpoint == null) return;
        
        try
        {
            LoadingMessage = "Loading data from database...";
            StateHasChanged();
            
            ImportedData = await ImportService.GetImportedDataAsync(SelectedEndpoint.TableName);
            FilteredData = ImportedData; // Initialize filtered data
            SearchText = ""; // Clear search
            SortColumn = ""; // Clear sort
            CurrentPage = 1; // Reset to first page when loading new data
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusMessage = $"❌ Error loading data: {ex.Message}";
            ImportedData = null;
            FilteredData = null;
            StateHasChanged();
        }
    }
    
    private IEnumerable<dynamic> GetPagedData()
    {
        if (FilteredData == null) return Enumerable.Empty<dynamic>();
        return FilteredData.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
    }
    
    private int GetTotalPages()
    {
        if (FilteredData == null || !FilteredData.Any()) return 1;
        return (int)Math.Ceiling((double)FilteredData.Count() / PageSize);
    }
    
    private void ApplyFilter()
    {
        if (ImportedData == null)
        {
            FilteredData = null;
            return;
        }
        
        if (string.IsNullOrWhiteSpace(SearchText))
        {
            FilteredData = ImportedData;
        }
        else
        {
            var searchLower = SearchText.ToLower();
            FilteredData = ImportedData.Where(row =>
            {
                foreach (var column in GetTableColumns())
                {
                    var value = GetCellValue(row, column)?.ToString()?.ToLower() ?? "";
                    if (value.Contains(searchLower))
                        return true;
                }
                return false;
            });
        }
        
        // Apply sorting if active
        if (!string.IsNullOrEmpty(SortColumn))
        {
            ApplySort();
        }
        
        CurrentPage = 1; // Reset to first page after filtering
        StateHasChanged();
    }
    
    private void ClearFilter()
    {
        SearchText = "";
        ApplyFilter();
    }
    
    private void SortByColumn(string column)
    {
        if (SortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
        
        ApplySort();
        CurrentPage = 1; // Reset to first page after sorting
        StateHasChanged();
    }
    
    private void ApplySort()
    {
        if (FilteredData == null || string.IsNullOrEmpty(SortColumn)) return;
        
        if (SortAscending)
        {
            FilteredData = FilteredData.OrderBy(row =>
            {
                var value = GetCellValue(row, SortColumn);
                var strValue = value?.ToString() ?? "";
                // Try to parse as number for numeric sorting
                if (int.TryParse(strValue, out int intValue))
                    return (object)intValue;
                return strValue;
            });
        }
        else
        {
            FilteredData = FilteredData.OrderByDescending(row =>
            {
                var value = GetCellValue(row, SortColumn);
                var strValue = value?.ToString() ?? "";
                // Try to parse as number for numeric sorting
                if (int.TryParse(strValue, out int intValue))
                    return (object)intValue;
                return strValue;
            });
        }
    }
    
    private void NextPage()
    {
        if (CurrentPage < GetTotalPages())
        {
            CurrentPage++;
            StateHasChanged();
        }
    }
    
    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            StateHasChanged();
        }
    }
    
    private IEnumerable<string> GetTableColumns()
    {
        if (ImportedData == null || !ImportedData.Any()) return Enumerable.Empty<string>();
        
        var firstItem = ImportedData.First();
        if (firstItem is IDictionary<string, object> dict)
        {
            return dict.Keys.Where(k => k != "Id" && k != "CreatedDate" && k != "ModifiedDate");
        }
        
        // Cast to object first to avoid dynamic issues
        object obj = firstItem;
        var properties = obj.GetType().GetProperties();
        return properties
            .Where(p => p.Name != "Id" && p.Name != "CreatedDate" && p.Name != "ModifiedDate")
            .Select(p => p.Name);
    }
    
    private object GetCellValue(dynamic row, string columnName)
    {
        try
        {
            if (row is IDictionary<string, object> dict)
            {
                return dict.ContainsKey(columnName) ? dict[columnName]?.ToString() ?? "" : "";
            }
            
            var prop = row.GetType().GetProperty(columnName);
            return prop?.GetValue(row)?.ToString() ?? "";
        }
        catch
        {
            return "";
        }
    }
    
    private async Task OnEndpointChanged()
    {
        SelectedEndpoint = EndpointRegistry.AllEndpoints.FirstOrDefault(e => e.Key == SelectedEndpointKey);
        ParameterValues.Clear();
        DropdownData.Clear();
        ImportedData = null;
        ShowViewData = false;
        StatusMessage = "";
        CurrentPage = 1; // Reset pagination
        
        // Load dropdown data for parameters
        if (SelectedEndpoint != null)
        {
            StatusMessage = $"Loading parameters for: {SelectedEndpoint.Name}";
            await LoadDropdownData();
            
            // Debug: Show what endpoint will be called
            Console.WriteLine($"Selected endpoint: {SelectedEndpoint.Endpoint}");
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadDropdownData()
    {
        if (SelectedEndpoint == null) return;
        
        foreach (var param in SelectedEndpoint.Parameters.Where(p => p.Type == "dropdown" && !string.IsNullOrEmpty(p.DropdownSource)))
        {
            // Skip dependent dropdowns - they'll be loaded when their dependency changes
            if (!string.IsNullOrEmpty(param.DependsOn))
                continue;
                
            if (!DropdownData.ContainsKey(param.DropdownSource!))
            {
                IsLoadingDropdowns = true;
                LoadingMessage = $"Loading {param.DropdownSource} data...";
                StateHasChanged();
                
                try
                {
                    // Load from database if already imported, otherwise fetch from API
                    var data = await ImportService.GetImportedDataAsync(param.DropdownSource!);
                    if (data == null || !data.Any())
                    {
                        // If no data in database, fetch from API
                        StatusMessage = $"📥 Fetching {param.DropdownSource} from API...";
                        StateHasChanged();
                        
                        var apiData = await ApiService.FetchDataAsync(param.DropdownSource!);
                        var deserializedData = Deserializer.DeserializeApiResponse(apiData, param.DropdownSource!);
                        
                        // Import to database for future use
                        await ImportService.ImportDataByEndpointAsync(param.DropdownSource!, deserializedData);
                        data = await ImportService.GetImportedDataAsync(param.DropdownSource!);
                        
                        StatusMessage = $"✅ Loaded {data?.Count() ?? 0} {param.DropdownSource}";
                    }
                    else
                    {
                        StatusMessage = $"✅ Loaded {data.Count()} {param.DropdownSource} from cache";
                    }
                    
                    DropdownData[param.DropdownSource!] = data ?? new List<dynamic>();
                }
                catch (Exception ex)
                {
                    StatusMessage = $"⚠️ Warning: Could not load {param.DropdownSource} data: {ex.Message}";
                    DropdownData[param.DropdownSource!] = new List<dynamic>(); // Empty list on error
                }
                finally
                {
                    IsLoadingDropdowns = false;
                    StateHasChanged();
                }
            }
        }
    }
    
    private string GetParameterValue(string paramName)
    {
        return ParameterValues.TryGetValue(paramName, out var value) ? value : "";
    }
    
    private async Task SetParameterValue(string paramName, string value)
    {
        ParameterValues[paramName] = value;
        Console.WriteLine($"SetParameterValue: {paramName} = {value}");
        
        // Clear dependent parameter values when parent changes
        if (SelectedEndpoint != null)
        {
            var dependentParams = SelectedEndpoint.Parameters
                .Where(p => p.DependsOn == paramName)
                .ToList();
                
            foreach (var depParam in dependentParams)
            {
                // Clear the dependent parameter value
                ParameterValues.Remove(depParam.Name);
                
                // Clear any parameters that depend on this dependent parameter
                var subDependentParams = SelectedEndpoint.Parameters
                    .Where(p => p.DependsOn == depParam.Name)
                    .ToList();
                foreach (var subParam in subDependentParams)
                {
                    ParameterValues.Remove(subParam.Name);
                }
            }
        }
        
        // Check if any other parameters depend on this one
        if (SelectedEndpoint != null)
        {
            var dependentParams = SelectedEndpoint.Parameters
                .Where(p => p.DependsOn == paramName && p.Type == "dropdown")
                .ToList();
                
            foreach (var depParam in dependentParams)
            {
                // Load issues for the selected plant
                if (depParam.DropdownSource == "issues" && paramName == "PLANTID" && !string.IsNullOrEmpty(value))
                {
                    await LoadIssuesForPlant(value);
                }
                // Load PCS data for the selected plant
                else if (depParam.DropdownSource == "pcs" && paramName == "PLANTID" && !string.IsNullOrEmpty(value))
                {
                    await LoadPCSForPlant(value);
                }
            }
        }
        
        StateHasChanged();
    }
    
    private async Task LoadIssuesForPlant(string plantId)
    {
        try
        {
            IsLoadingDropdowns = true;
            LoadingMessage = $"Loading issues for plant {plantId}...";
            StateHasChanged();
            
            // Fetch issues for this plant
            var endpoint = $"plants/{plantId}/issues";
            var apiData = await ApiService.FetchDataAsync(endpoint);
            var deserializedData = Deserializer.DeserializeApiResponse(apiData, endpoint);
            
            // Import to database
            await ImportService.ImportDataByEndpointAsync(endpoint, deserializedData);
            var data = await ImportService.GetImportedDataAsync("issues");
            
            // Store issues data - we'll use it for all revision dropdowns
            DropdownData["issues"] = data ?? new List<dynamic>();
            StatusMessage = $"✅ Loaded {data?.Count() ?? 0} issues for selected plant";
        }
        catch (Exception ex)
        {
            StatusMessage = $"⚠️ Warning: Could not load issues: {ex.Message}";
            DropdownData["issues"] = new List<dynamic>();
        }
        finally
        {
            IsLoadingDropdowns = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadPCSForPlant(string plantId)
    {
        try
        {
            IsLoadingDropdowns = true;
            LoadingMessage = $"Loading PCS for plant {plantId}...";
            StateHasChanged();
            
            // Check if we already have PCS data for this plant in the database
            var data = await ImportService.GetImportedDataAsync("pcs");
            
            // If no data or data is not for this plant, fetch from API
            if (data == null || !data.Any() || !data.Any(item => GetDropdownValue(item, "PlantID") == plantId))
            {
                // Fetch PCS for this plant
                var endpoint = $"plants/{plantId}/pcs";
                var apiData = await ApiService.FetchDataAsync(endpoint);
                var deserializedData = Deserializer.DeserializeApiResponse(apiData, endpoint);
                
                // Import to database
                await ImportService.ImportDataByEndpointAsync(endpoint, deserializedData);
                data = await ImportService.GetImportedDataAsync("pcs");
            }
            
            // Store PCS data - we'll use it for PCS ID and revision dropdowns
            DropdownData["pcs"] = data ?? new List<dynamic>();
            StatusMessage = $"✅ Loaded {data?.Where(item => GetDropdownValue(item, "PlantID") == plantId).Count() ?? 0} PCS for selected plant";
        }
        catch (Exception ex)
        {
            StatusMessage = $"⚠️ Warning: Could not load PCS: {ex.Message}";
            DropdownData["pcs"] = new List<dynamic>();
        }
        finally
        {
            IsLoadingDropdowns = false;
            StateHasChanged();
        }
    }
    
    private List<(string Value, string Display)> GetUniqueAndSortedDropdownItems(EndpointParameter param)
    {
        if (!DropdownData.ContainsKey(param.DropdownSource!))
            return new List<(string, string)>();
            
        var items = new List<(string Value, string Display)>();
        var seenValues = new HashSet<string>();
        
        // Get the data to iterate through - may need filtering
        var dataToProcess = DropdownData[param.DropdownSource!];
        
        // Filter based on dependencies
        if (!string.IsNullOrEmpty(param.DependsOn))
        {
            var dependencyValue = GetParameterValue(param.DependsOn);
            if (!string.IsNullOrEmpty(dependencyValue))
            {
                // Filter PCS items by PlantID
                if (param.DropdownSource == "pcs" && param.DependsOn == "PLANTID")
                {
                    dataToProcess = dataToProcess.Where(item =>
                    {
                        var plantId = GetDropdownValue(item, "PlantID");
                        return plantId == dependencyValue;
                    }).ToList();
                }
                // Filter PCS revisions by PCSID
                else if (param.DropdownSource == "pcs" && param.DependsOn == "PCSID")
                {
                    dataToProcess = dataToProcess.Where(item =>
                    {
                        var pcsId = GetDropdownValue(item, "PCS");
                        var plantId = GetParameterValue("PLANTID");
                        var itemPlantId = GetDropdownValue(item, "PlantID");
                        return pcsId == dependencyValue && itemPlantId == plantId;
                    }).ToList();
                }
            }
        }
        
        foreach (var item in dataToProcess)
        {
            var value = GetDropdownValue(item, param.ValueField);
            var display = GetDropdownDisplay(item, param.DisplayField);
            
            if (!string.IsNullOrEmpty(value) && !seenValues.Contains(value))
            {
                seenValues.Add(value);
                items.Add((value, display));
            }
        }
        
        // Special sorting for revision fields
        if ((param.DropdownSource == "issues" || param.DropdownSource == "pcs") && param.ValueField?.Contains("Revision") == true)
        {
            return SortRevisions(items);
        }
        
        // Default sorting for other fields
        return items.OrderBy(i => i.Display).ToList();
    }
    
    private List<(string Value, string Display)> SortRevisions(List<(string Value, string Display)> items)
    {
        var numericOnly = new List<(string Value, string Display, int NumValue)>();
        var alphanumeric = new List<(string Value, string Display)>();
        
        foreach (var item in items)
        {
            if (int.TryParse(item.Value, out int numValue))
            {
                numericOnly.Add((item.Value, item.Display, numValue));
            }
            else
            {
                alphanumeric.Add(item);
            }
        }
        
        // Sort numeric revisions numerically
        var sortedNumeric = numericOnly.OrderBy(i => i.NumValue).Select(i => (i.Value, i.Display));
        
        // Sort alphanumeric revisions - if starts with number, extract it for sorting
        var sortedAlpha = alphanumeric.OrderBy(i => 
        {
            // Try to extract leading number for sorting
            var match = System.Text.RegularExpressions.Regex.Match(i.Value, @"^(\d+)");
            if (match.Success && int.TryParse(match.Groups[1].Value, out int leadingNum))
            {
                // Pad the number for proper string sorting, then add the rest
                return leadingNum.ToString("D10") + i.Value.Substring(match.Length);
            }
            return "Z" + i.Value; // Put non-numeric start after all numeric
        }).Select(i => (i.Value, i.Display));
        
        // Combine: numbers first, then alphanumeric
        return sortedNumeric.Concat(sortedAlpha).ToList();
    }
    
    private string GetDropdownValue(dynamic item, string? valueField)
    {
        if (string.IsNullOrEmpty(valueField)) return "";
        
        try
        {
            if (item is IDictionary<string, object> dict && dict.ContainsKey(valueField))
            {
                return dict[valueField]?.ToString() ?? "";
            }
            
            object obj = item;
            var prop = obj.GetType().GetProperty(valueField);
            return prop?.GetValue(obj)?.ToString() ?? "";
        }
        catch
        {
            return "";
        }
    }
    
    private string GetDropdownDisplay(dynamic item, string? displayField)
    {
        if (string.IsNullOrEmpty(displayField)) return "";
        
        try
        {
            if (item is IDictionary<string, object> dict && dict.ContainsKey(displayField))
            {
                return dict[displayField]?.ToString() ?? "";
            }
            
            object obj = item;
            var prop = obj.GetType().GetProperty(displayField);
            return prop?.GetValue(obj)?.ToString() ?? "";
        }
        catch
        {
            return "";
        }
    }
    
    private string GetFinalEndpoint()
    {
        if (SelectedEndpoint == null) return "";
        
        var endpoint = SelectedEndpoint.Endpoint;
        
        // Replace parameters in the endpoint
        foreach (var param in SelectedEndpoint.Parameters)
        {
            if (ParameterValues.TryGetValue(param.Name, out var value) && !string.IsNullOrEmpty(value))
            {
                // URL encode revision parameters to handle special characters
                if (param.Name.Contains("REV") || param.Name == "ISSUEREV")
                {
                    value = System.Net.WebUtility.UrlEncode(value);
                }
                // Convert parameter name to lowercase for URL replacement
                var urlParamName = param.Name.ToLower();
                if (param.Name == "ISSUEREV") urlParamName = "issuerev";
                if (param.Name == "PLANTID") urlParamName = "plantid";
                if (param.Name == "OPERATORID") urlParamName = "operatorid";
                
                Console.WriteLine($"GetFinalEndpoint: Replacing {{{urlParamName}}} with {value}");
                endpoint = endpoint.Replace($"{{{urlParamName}}}", value);
            }
            else if (param.IsRequired)
            {
                Console.WriteLine($"GetFinalEndpoint: Missing required parameter {param.Name}");
                return ""; // Required parameter is missing
            }
        }
        
        Console.WriteLine($"GetFinalEndpoint: Final endpoint = {endpoint}");
        return endpoint;
    }
    
    private bool CanImport()
    {
        if (IsLoading) return false;
        if (SelectedEndpoint == null) return false;
        
        // Check all required parameters are filled
        foreach (var param in SelectedEndpoint.Parameters.Where(p => p.IsRequired))
        {
            if (!ParameterValues.TryGetValue(param.Name, out var value) || string.IsNullOrEmpty(value))
            {
                return false;
            }
        }
        
        return !string.IsNullOrEmpty(GetFinalEndpoint());
    }
}