@page "/etl-operations"
@using TR2KBlazorLibrary.Logic.Services
@using TR2KBlazorLibrary.Models
@inject OracleETLServiceV2 ETLService
@inject ILogger<ETLOperations> Logger
@rendermode InteractiveServer

<h3>ETL Operations - TR2000 Data Management</h3>

<!-- Collapsible Knowledge Articles Section -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white; cursor: pointer;" @onclick="ToggleKnowledgeSection">
        <h6 class="mb-0">
            <i class="bi @(showKnowledgeSection ? "bi-chevron-down" : "bi-chevron-right")"></i> 
            Knowledge Articles & Documentation
            <small class="text-white-50 ms-2">(@(showKnowledgeSection ? "click to collapse" : "click to expand"))</small>
        </h6>
    </div>
    @if (showKnowledgeSection)
    {
        <div class="card-body">
            <!-- Understanding SCD2 -->
            <details class="mb-3">
                <summary class="h6 text-primary" style="cursor: pointer;">
                    <i class="bi bi-mortarboard"></i> Understanding SCD2 (Slowly Changing Dimension Type 2)
                </summary>
                <div class="mt-2 ps-3">
                    <p><strong>What is SCD2?</strong> A data warehousing technique that tracks historical changes by creating new records for each change while preserving old records.</p>
                    
                    <h6>Key Concepts:</h6>
                    <ul>
                        <li><strong>VALID_FROM/VALID_TO</strong>: Temporal boundaries showing when a record was active</li>
                        <li><strong>IS_CURRENT</strong>: Flag indicating the current version (Y/N)</li>
                        <li><strong>CHANGE_TYPE</strong>: Tracks the operation (INSERT, UPDATE, DELETE, REACTIVATE)</li>
                        <li><strong>SRC_HASH</strong>: SHA256 hash of all fields to detect changes</li>
                    </ul>

                    <h6>Our Implementation Handles:</h6>
                    <ol>
                        <li><strong>INSERT</strong>: New records from API → Create with IS_CURRENT='Y'</li>
                        <li><strong>UPDATE</strong>: Changed records → Close old (IS_CURRENT='N'), create new version</li>
                        <li><strong>DELETE</strong>: Missing from API or plant removed from loader → Mark with DELETE_DATE, IS_CURRENT='N'</li>
                        <li><strong>REACTIVATE</strong>: Deleted record returns → Create new version with CHANGE_TYPE='REACTIVATE'</li>
                        <li><strong>UNCHANGED</strong>: No changes detected → Skip processing</li>
                    </ol>
                    
                    <div class="alert alert-warning mt-2">
                        <strong>🔄 Deletion Cascade:</strong> When a plant is removed from the Plant Loader, 
                        all its issues are automatically marked as deleted during the next Issues ETL run. 
                        This ensures downstream reference tables only process relevant data. If the plant 
                        is added back to the loader, its issues will be reactivated automatically.
                    </div>
                </div>
            </details>

            <!-- ETL Process Flow -->
            <details class="mb-3">
                <summary class="h6 text-success" style="cursor: pointer;">
                    <i class="bi bi-diagram-3"></i> ETL Process Flow
                </summary>
                <div class="mt-2 ps-3">
                    <h6>When you click "Load" buttons:</h6>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-primary">Step 1: C# Service (Data Movement)</h6>
                            <ol>
                                <li>Fetch data from TR2000 API</li>
                                <li>Insert RAW_JSON for audit trail</li>
                                <li>Get next ETL_RUN_ID from sequence</li>
                                <li>Bulk insert into STG_* staging tables</li>
                                <li>Call SP_PROCESS_ETL_BATCH orchestrator</li>
                                <li>Return results to UI</li>
                            </ol>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-primary">Step 2: Oracle Orchestrator (Business Logic)</h6>
                            <ol>
                                <li><strong>Deduplication</strong>: Remove duplicates using STG_ID</li>
                                <li><strong>Validation</strong>: Check business rules</li>
                                <li><strong>SCD2 Processing</strong>: Apply temporal logic</li>
                                <li><strong>Reconciliation</strong>: Count source vs target</li>
                                <li><strong>Cleanup</strong>: Purge old history/logs</li>
                                <li><strong>COMMIT</strong>: Single atomic transaction</li>
                            </ol>
                        </div>
                    </div>

                    <div class="alert alert-warning mt-3">
                        <strong>Key Safety Features:</strong>
                        <ul class="mb-0">
                            <li>API data fetched BEFORE starting transaction (prevents locks)</li>
                            <li>Autonomous error logging (survives rollbacks)</li>
                            <li>All-or-nothing: Complete success or complete rollback</li>
                            <li>RAW_JSON audit trail with 30-day retention</li>
                        </ul>
                    </div>
                </div>
            </details>

            <!-- Oracle Database Objects -->
            <details class="mb-3">
                <summary class="h6 text-warning" style="cursor: pointer;">
                    <i class="bi bi-database"></i> Oracle Database Objects
                </summary>
                <div class="mt-2 ps-3">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>Staging Tables</h6>
                            <ul class="small">
                                <li><code>STG_OPERATORS</code></li>
                                <li><code>STG_PLANTS</code></li>
                                <li><code>STG_ISSUES</code></li>
                                <li class="text-muted">Auto-cleared after ETL</li>
                            </ul>
                        </div>
                        <div class="col-md-3">
                            <h6>Dimension Tables (SCD2)</h6>
                            <ul class="small">
                                <li><code>OPERATORS</code></li>
                                <li><code>PLANTS</code></li>
                                <li><code>ISSUES</code></li>
                                <li class="text-muted">Full history forever</li>
                            </ul>
                        </div>
                        <div class="col-md-3">
                            <h6>Control & Audit</h6>
                            <ul class="small">
                                <li><code>ETL_CONTROL</code></li>
                                <li><code>ETL_ERROR_LOG</code></li>
                                <li><code>ETL_PLANT_LOADER</code></li>
                                <li><code>ETL_ISSUE_LOADER</code></li>
                                <li><code>RAW_JSON</code> <span class="badge bg-info">Issues</span></li>
                                <li class="text-muted">Auto-cleanup</li>
                            </ul>
                        </div>
                        <div class="col-md-3">
                            <h6>Key Procedures</h6>
                            <ul class="small">
                                <li><code>SP_PROCESS_ETL_BATCH</code></li>
                                <li><code>PKG_OPERATORS_ETL</code></li>
                                <li><code>PKG_PLANTS_ETL</code></li>
                                <li><code>PKG_ISSUES_ETL</code></li>
                            </ul>
                        </div>
                    </div>
                    
                    <h6 class="mt-3">Data Retention Policies:</h6>
                    <ul>
                        <li><strong>Dimension Tables</strong>: <span class="badge bg-success">PERMANENT</span> - Full history forever</li>
                        <li><strong>Staging Tables</strong>: <span class="badge bg-secondary">TEMPORARY</span> - Cleared after each run</li>
                        <li><strong>ETL_CONTROL</strong>: <span class="badge bg-secondary">10 RUNS</span> - Auto-cleanup</li>
                        <li><strong>ETL_ERROR_LOG</strong>: <span class="badge bg-secondary">30 DAYS</span> - Auto-cleanup</li>
                        <li><strong>RAW_JSON</strong>: <span class="badge bg-secondary">30 DAYS</span> - Auto-cleanup</li>
                    </ul>
                </div>
            </details>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(statusMessage.Contains("Error") ? "alert-danger" : statusMessage.Contains("Success") ? "alert-success" : "alert-info")">
        @statusMessage
    </div>
}

<!-- SQL Preview Modal -->
@if (showSqlPreview && currentSqlPreview != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @currentSqlPreview.Title
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showSqlPreview = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> <strong>What happens when you click Load:</strong>
                        <br/>@currentSqlPreview.Description
                    </div>

                    @foreach (var step in currentSqlPreview.Steps)
                    {
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    Step @step.StepNumber: @step.Title
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="text-muted">@step.Description</p>
                                <pre class="bg-dark text-light p-3 rounded" style="font-size: 0.9rem; overflow-x: auto;">@step.SqlStatement</pre>
                            </div>
                        </div>
                    }

                    <div class="alert alert-warning">
                        <h6><i class="bi bi-shield-check"></i> Data Integrity Features:</h6>
                        <ul>
                            <li><strong>Atomic Transactions</strong>: All-or-nothing processing</li>
                            <li><strong>Autonomous Error Logging</strong>: Errors recorded even if transaction rolls back</li>
                            <li><strong>Hash-based Change Detection</strong>: Only changed records are processed</li>
                            <li><strong>Soft Deletes</strong>: Records never physically deleted, marked with DELETE_DATE</li>
                            <li><strong>Full Audit Trail</strong>: Every change tracked with CHANGE_TYPE and timestamps</li>
                        </ul>
                    </div>

                    <div class="alert alert-success">
                        <h6><i class="bi bi-clock-history"></i> Data Retention Policies:</h6>
                        <ul>
                            <li><strong>Dimension Tables (OPERATORS, PLANTS, ISSUES)</strong>: <span class="badge bg-success">PERMANENT</span> - Full history forever</li>
                            <li><strong>Staging Tables (STG_*)</strong>: <span class="badge bg-secondary">TEMPORARY</span> - Cleared after each successful run</li>
                            <li><strong>ETL_CONTROL</strong>: <span class="badge bg-secondary">10 RUNS</span> - Cleaned after each ETL (automatic)</li>
                            <li><strong>ETL_ERROR_LOG</strong>: <span class="badge bg-secondary">30 DAYS</span> - Cleaned after each ETL (automatic)</li>
                            <li><strong>RAW_JSON</strong>: <span class="badge bg-secondary">30 DAYS</span> - Cleaned after each ETL (automatic)</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showSqlPreview = false">
                        <i class="bi bi-x"></i> Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ExecuteAfterPreview" disabled="@isLoading">
                        <i class="bi bi-play-fill"></i> Execute Now
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <!-- Section 1: Database Setup -->
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header" style="background-color: #00346a; color: white;">
                <h6 class="mb-0">1. Database Setup</h6>
            </div>
            <div class="card-body">
                <button class="btn btn-outline-primary mb-2" @onclick="TestConnection" disabled="@isLoading">
                    Test Connection
                </button>
                
                @if (connectionStatus)
                {
                    <small class="text-success d-block">✅ Connected to Oracle</small>
                }
            </div>
        </div>
    </div>

    <!-- Section 2: Plant Loader Configuration -->
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header" style="background-color: #00346a; color: white;">
                <h6 class="mb-0">2. Plant Loader Configuration (Scope Control)</h6>
            </div>
            <div class="card-body">
                @if (!plantLoaderTableExists)
                {
                    <div class="alert alert-warning small">
                        Plant loader table doesn't exist yet.
                    </div>
                    <button class="btn btn-outline-primary mb-2" @onclick="CreatePlantLoaderTable" disabled="@isLoading">
                        Create Plant Loader Table
                    </button>
                }
                else
                {
                    <div class="mb-3">
                        <label class="form-label small">Add Plant to Loader:</label>
                        <div class="input-group input-group-sm">
                            <select class="form-select" @bind="selectedPlantToAdd" disabled="@isLoading">
                                <option value="">-- Select Plant --</option>
                                @foreach (var plant in availablePlants)
                                {
                                    <option value="@plant.PlantID">@plant.PlantName (@plant.PlantID)</option>
                                }
                            </select>
                            <button class="btn btn-outline-primary" @onclick="AddPlantToLoader" disabled="@(isLoading || string.IsNullOrEmpty(selectedPlantToAdd))">
                                Add
                            </button>
                        </div>
                    </div>

                    @if (plantLoaderEntries != null && plantLoaderEntries.Any())
                    {
                        <h6 class="small">Plants to Process for Issues ETL:</h6>
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Plant</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entry in plantLoaderEntries)
                                {
                                    <tr>
                                        <td class="small">@entry.PlantName (@entry.PlantID)</td>
                                        <td>
                                            <button class="btn btn-sm btn-link text-danger p-0" @onclick="() => RemovePlantFromLoader(entry.PlantID)" disabled="@isLoading">
                                                Remove
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <small class="text-muted">
                            @plantLoaderEntries.Count plant(s) will be processed when loading issues.
                        </small>
                    }
                    else
                    {
                        <p class="small text-muted">No plants configured yet. Add plants above to control which ones are processed during Issues ETL.</p>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Section 2.5: Issue Loader Configuration (Reference Scope Control) -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white;">
        <h6 class="mb-0">2.5. Issue Loader Configuration (Reference Tables Scope)</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (!issueLoaderTableExists)
                {
                    <div class="alert alert-warning small">
                        Issue loader table doesn't exist yet.
                    </div>
                    <button class="btn btn-outline-primary mb-2" @onclick="CreateIssueLoaderTable" disabled="@isLoading">
                        Create Issue Loader Table
                    </button>
                }
                else
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label small">Select Plant:</label>
                            <select class="form-select form-select-sm" value="@selectedPlantForIssues" @onchange="OnPlantSelectedForIssues" disabled="@isLoading">
                                <option value="">-- Select Plant --</option>
                                @foreach (var entry in plantLoaderEntries ?? new List<PlantLoaderEntry>())
                                {
                                    <option value="@entry.PlantID">@entry.PlantName (@entry.PlantID)</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small">Select Issue Revision:</label>
                            <div class="input-group input-group-sm">
                                <select class="form-select" @bind="selectedIssueRevision" disabled="@(isLoading || string.IsNullOrEmpty(selectedPlantForIssues))">
                                    <option value="">-- Select Issue --</option>
                                    @foreach (var issue in availableIssues)
                                    {
                                        <option value="@issue.IssueRevision">@issue.IssueRevision</option>
                                    }
                                </select>
                                <button class="btn btn-outline-primary" @onclick="AddIssueToLoader" disabled="@(isLoading || string.IsNullOrEmpty(selectedPlantForIssues) || string.IsNullOrEmpty(selectedIssueRevision))">
                                    Add
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (issueLoaderEntries != null && issueLoaderEntries.Any())
                    {
                        <h6 class="small">Issues Selected for Reference Loading:</h6>
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Plant</th>
                                    <th>Issue Revision</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entry in issueLoaderEntries)
                                {
                                    <tr>
                                        <td class="small">@entry.PlantName (@entry.PlantID)</td>
                                        <td class="small">@entry.IssueRevision</td>
                                        <td>
                                            <button class="btn btn-sm btn-link text-danger p-0" @onclick="() => RemoveIssueFromLoader(entry.PlantID, entry.IssueRevision)" disabled="@isLoading">
                                                Remove
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <small class="text-muted">
                            @issueLoaderEntries.Count issue(s) selected. When present in this table, their reference tables will be loaded (API optimization: ~70% fewer calls).
                        </small>
                    }
                    else
                    {
                        <p class="small text-muted">No issues configured yet. Select issues above to control which reference tables are loaded.</p>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Section 3: Master Data ETL -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white;">
        <h6 class="mb-0">3. Master Data ETL</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-primary btn-sm" @onclick="LoadOperators" disabled="@isLoading">
                        Load Operators
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("operators")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
            </div>
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-primary btn-sm" @onclick="LoadPlants" disabled="@isLoading">
                        Load Plants
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("plants")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
            </div>
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-primary btn-sm" @onclick="LoadIssues" disabled="@isLoading">
                        Load Issues
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("issues")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses plants from loader</small>
            </div>
        </div>
    </div>
</div>

<!-- Section 4: Reference Data ETL -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white;">
        <h6 class="mb-0">4. Reference Data ETL</h6>
    </div>
    <div class="card-body">
        <!-- VDS References -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadVDSReferences" disabled="@isLoading">
                        Load VDS References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("vds_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>VDS References:</strong> Loads Valve Data Sheet references for all issues in the Issue Loader. 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
        
        <!-- EDS References -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadEDSReferences" disabled="@isLoading">
                        Load EDS References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("eds_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>EDS References:</strong> Loads Equipment Data Sheet references for all issues in the Issue Loader. 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
        
        <!-- MDS References -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadMDSReferences" disabled="@isLoading">
                        Load MDS References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("mds_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>MDS References:</strong> Loads Material Data Sheet references for all issues in the Issue Loader (includes Area field). 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
        
        <!-- VSK References -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadVSKReferences" disabled="@isLoading">
                        Load VSK References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("vsk_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>VSK References:</strong> Loads Valve Sketch references for all issues in the Issue Loader. 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
        
        <!-- ESK References -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadESKReferences" disabled="@isLoading">
                        Load ESK References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("esk_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>ESK References:</strong> Loads Equipment Sketch references for all issues in the Issue Loader. 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
        
        <!-- Pipe Element References -->
        <div class="row">
            <div class="col-md-4">
                <div class="d-flex gap-2 mb-2">
                    <button class="btn btn-success btn-sm" @onclick="LoadPipeElementReferences" disabled="@isLoading">
                        Load Pipe Element References
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick='() => ShowSqlPreview("pipe_element_references")' disabled="@isLoading">
                        Preview SQL
                    </button>
                </div>
                <small class="text-muted">Uses issues from Issue Loader (70% fewer API calls)</small>
            </div>
            <div class="col-md-8">
                <div class="alert alert-info small mb-0">
                    <strong>Pipe Element References:</strong> Loads Pipe Element references for all issues in the Issue Loader (different structure with Tag, Type, Size, Rating, Material). 
                    Includes cascade deletion - references for removed issues are automatically marked as deleted.
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Section 5: Current Table Status -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white;">
        <h6 class="mb-0">5. Current Table Status</h6>
    </div>
    <div class="card-body">
        <button class="btn btn-sm btn-secondary mb-2" @onclick="RefreshStatus" disabled="@isLoading">
            Refresh Status
        </button>
        
        @if (tableStatuses != null && tableStatuses.Any())
        {
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Table</th>
                        <th>Current Records</th>
                        <th>Historical Records</th>
                        <th>Total</th>
                        <th>Last Modified</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var status in tableStatuses)
                    {
                        <tr>
                            <td>@status.TableName</td>
                            <td><span class="badge bg-success">@status.CurrentRows</span></td>
                            <td><span class="badge bg-secondary">@status.HistoricalRows</span></td>
                            <td><span class="badge bg-primary">@status.TotalRows</span></td>
                            <td>@status.LastModified?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


<!-- Section 6: ETL History -->
<div class="card mb-3">
    <div class="card-header" style="background-color: #00346a; color: white;">
        <h6 class="mb-0">6. ETL Run History</h6>
    </div>
    <div class="card-body">
        @if (etlHistory != null && etlHistory.Any())
        {
            <table class="table table-sm table-striped">
                <thead>
                    <tr>
                        <th>Run ID</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Start Time</th>
                        <th>Duration (s)</th>
                        <th>Loaded</th>
                        <th>Updated</th>
                        <th>Deleted</th>
                        <th>Reactivated</th>
                        <th>Unchanged</th>
                        <th>API Calls</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var run in etlHistory)
                    {
                        <tr class="@(run.Status == "SUCCESS" ? "" : "table-danger")">
                            <td>@run.RunId</td>
                            <td>@run.RunType</td>
                            <td>
                                <span class="badge @(run.Status == "SUCCESS" ? "bg-success" : "bg-danger")">
                                    @run.Status
                                </span>
                            </td>
                            <td>@run.StartTime?.ToString("HH:mm:ss")</td>
                            <td>@run.ProcessingTimeSeconds?.ToString("F2")</td>
                            <td>@run.RecordsLoaded</td>
                            <td>@run.RecordsUpdated</td>
                            <td>@run.RecordsDeleted</td>
                            <td>@run.RecordsReactivated</td>
                            <td>@run.RecordsUnchanged</td>
                            <td>@run.ApiCallCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No ETL runs yet.</p>
        }
    </div>
</div>

<!-- Loading Spinner -->
@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>@loadingMessage</p>
    </div>
}

@code {
    private bool isLoading = false;
    private string statusMessage = "";
    private string loadingMessage = "";
    private bool connectionStatus = false;
    private bool showSqlPreview = false;
    private bool showKnowledgeSection = false;  // Start collapsed
    private ETLSqlPreview? currentSqlPreview = null;
    private string currentPreviewEntity = "";
    
    // Plant Loader variables
    private bool plantLoaderTableExists = false;
    private string selectedPlantToAdd = "";
    private List<PlantLoaderEntry> plantLoaderEntries = new List<PlantLoaderEntry>();
    private List<Plant> availablePlants = new List<Plant>();
    
    // Issue Loader variables
    private bool issueLoaderTableExists = false;
    private string selectedPlantForIssues = "";
    private string selectedIssueRevision = "";
    private List<IssueLoaderEntry> issueLoaderEntries = new List<IssueLoaderEntry>();
    private List<Issue> availableIssues = new List<Issue>();
    
    private List<TableStatus> tableStatuses = new List<TableStatus>();
    private List<ETLRunHistory> etlHistory = new List<ETLRunHistory>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
        await CheckPlantLoaderStatus();
        await CheckIssueLoaderStatus();
    }
    
    private void ToggleKnowledgeSection()
    {
        showKnowledgeSection = !showKnowledgeSection;
    }
    
    private async Task CheckPlantLoaderStatus()
    {
        try
        {
            plantLoaderTableExists = await ETLService.CheckPlantLoaderTableExists();
            if (plantLoaderTableExists)
            {
                await LoadPlantLoaderData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to check plant loader status");
        }
    }
    
    private async Task LoadPlantLoaderData()
    {
        try
        {
            plantLoaderEntries = await ETLService.GetPlantLoaderEntries();
            availablePlants = await ETLService.GetAllPlants();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load plant loader data");
        }
    }
    
    private async Task CreatePlantLoaderTable()
    {
        isLoading = true;
        loadingMessage = "Creating plant loader table...";
        statusMessage = "";
        
        try
        {
            await ETLService.CreatePlantLoaderTable();
            plantLoaderTableExists = true;
            await LoadPlantLoaderData();
            statusMessage = "✅ Plant loader table created successfully";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error creating plant loader table: {ex.Message}";
            Logger.LogError(ex, "Failed to create plant loader table");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task AddPlantToLoader()
    {
        if (string.IsNullOrEmpty(selectedPlantToAdd)) return;
        
        isLoading = true;
        loadingMessage = "Adding plant to loader...";
        
        try
        {
            await ETLService.AddPlantToLoader(selectedPlantToAdd);
            await LoadPlantLoaderData();
            selectedPlantToAdd = "";
            statusMessage = "✅ Plant added to loader successfully";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error adding plant: {ex.Message}";
            Logger.LogError(ex, "Failed to add plant to loader");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // REMOVED: Active/Inactive concept removed for simplicity
    // All plants in the loader are processed - simpler design
    // private async Task TogglePlantActive(string plantId)
    // {
    //     // Method removed - no longer needed
    // }
    
    private async Task RemovePlantFromLoader(string plantId)
    {
        isLoading = true;
        loadingMessage = "Removing plant from loader...";
        
        try
        {
            await ETLService.RemovePlantFromLoader(plantId);
            await LoadPlantLoaderData();
            // Refresh Issue Loader to show cascade deletion in UI
            if (issueLoaderTableExists)
            {
                await LoadIssueLoaderData();
            }
            statusMessage = "✅ Plant removed from loader (issues cascade deleted)";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error removing plant: {ex.Message}";
            Logger.LogError(ex, "Failed to remove plant");
        }
        finally
        {
            isLoading = false;
        }
    }

    #region Issue Loader Methods

    private async Task CheckIssueLoaderStatus()
    {
        try
        {
            issueLoaderTableExists = await ETLService.CheckIssueLoaderTableExists();
            if (issueLoaderTableExists)
            {
                await LoadIssueLoaderData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to check issue loader status");
        }
    }

    private async Task LoadIssueLoaderData()
    {
        try
        {
            issueLoaderEntries = await ETLService.GetIssueLoaderEntries();
            StateHasChanged(); // Refresh UI after loading issue loader data
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load issue loader data");
        }
    }

    private async Task CreateIssueLoaderTable()
    {
        isLoading = true;
        loadingMessage = "Creating issue loader table...";
        
        try
        {
            await ETLService.CreateIssueLoaderTable();
            issueLoaderTableExists = true;
            await LoadIssueLoaderData();
            statusMessage = "✅ Issue loader table created successfully";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error creating issue loader table: {ex.Message}";
            Logger.LogError(ex, "Failed to create issue loader table");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPlantSelectedForIssues(ChangeEventArgs e)
    {
        selectedPlantForIssues = e.Value?.ToString() ?? "";
        selectedIssueRevision = ""; // Reset issue selection
        
        if (!string.IsNullOrEmpty(selectedPlantForIssues))
        {
            try
            {
                availableIssues = await ETLService.GetIssuesForPlant(selectedPlantForIssues);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load issues for plant {PlantId}", selectedPlantForIssues);
                availableIssues = new List<Issue>();
            }
        }
        else
        {
            availableIssues = new List<Issue>();
        }
        
        StateHasChanged();
    }

    private async Task AddIssueToLoader()
    {
        isLoading = true;
        loadingMessage = "Adding issue to loader...";
        
        try
        {
            await ETLService.AddIssueToLoader(selectedPlantForIssues, selectedIssueRevision);
            await LoadIssueLoaderData();
            selectedIssueRevision = ""; // Reset selection
            statusMessage = "✅ Issue added to loader";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error adding issue: {ex.Message}";
            Logger.LogError(ex, "Failed to add issue");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RemoveIssueFromLoader(string plantId, string issueRevision)
    {
        isLoading = true;
        loadingMessage = "Removing issue from loader...";
        
        try
        {
            await ETLService.RemoveIssueFromLoader(plantId, issueRevision);
            await LoadIssueLoaderData();
            statusMessage = "✅ Issue removed from loader";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error removing issue: {ex.Message}";
            Logger.LogError(ex, "Failed to remove issue");
        }
        finally
        {
            isLoading = false;
        }
    }


    #endregion

    private async Task TestConnection()
    {
        isLoading = true;
        loadingMessage = "Testing Oracle connection...";
        statusMessage = "";
        
        try
        {
            connectionStatus = await ETLService.TestConnection();
            statusMessage = connectionStatus ? 
                "✅ Successfully connected to Oracle database" : 
                "❌ Failed to connect to Oracle database";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Connection test failed");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadOperators()
    {
        isLoading = true;
        loadingMessage = "Loading operators with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadOperators();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load operators");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPlants()
    {
        isLoading = true;
        loadingMessage = "Loading plants with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadPlants();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
                // Refresh plant loader dropdown after successful plant load
                if (plantLoaderTableExists)
                {
                    await LoadPlantLoaderData();
                    StateHasChanged(); // Force UI refresh
                }
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load plants");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        loadingMessage = "Loading issues with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadIssuesForSelectedPlants();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load issues");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadVDSReferences()
    {
        isLoading = true;
        loadingMessage = "Loading VDS references...";
        
        try
        {
            var result = await ETLService.LoadVDSReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load VDS references");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadEDSReferences()
    {
        isLoading = true;
        loadingMessage = "Loading EDS references...";
        
        try
        {
            var result = await ETLService.LoadEDSReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load EDS references");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadMDSReferences()
    {
        isLoading = true;
        loadingMessage = "Loading MDS references...";
        
        try
        {
            var result = await ETLService.LoadMDSReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load MDS references");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadVSKReferences()
    {
        isLoading = true;
        loadingMessage = "Loading VSK references...";
        
        try
        {
            var result = await ETLService.LoadVSKReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load VSK references");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadESKReferences()
    {
        isLoading = true;
        loadingMessage = "Loading ESK references...";
        
        try
        {
            var result = await ETLService.LoadESKReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load ESK references");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadPipeElementReferences()
    {
        isLoading = true;
        loadingMessage = "Loading Pipe Element references...";
        
        try
        {
            var result = await ETLService.LoadPipeElementReferences();
            statusMessage = result.Status == "SUCCESS" ? $"✅ {result.Message}" : $"❌ {result.Message}";
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load Pipe Element references");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshStatus()
    {
        try
        {
            tableStatuses = await ETLService.GetTableStatuses();
            etlHistory = await ETLService.GetETLHistory(10);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh status");
        }
    }

    private void ShowSqlPreview(string entity)
    {
        currentPreviewEntity = entity;
        showSqlPreview = true;
        
        currentSqlPreview = entity switch
        {
            "operators" => ETLService.GetOperatorsSqlPreview(),
            "plants" => ETLService.GetPlantsSqlPreview(),
            "issues" => ETLService.GetIssuesSqlPreview(),
            "vds_references" => ETLService.GetVDSReferencesSqlPreview(),
            "eds_references" => ETLService.GetEDSReferencesSqlPreview(),
            "mds_references" => ETLService.GetMDSReferencesSqlPreview(),
            "vsk_references" => ETLService.GetVSKReferencesSqlPreview(),
            "esk_references" => ETLService.GetESKReferencesSqlPreview(),
            "pipe_element_references" => ETLService.GetPipeElementReferencesSqlPreview(),
            _ => null
        };
    }

    private async Task ExecuteAfterPreview()
    {
        showSqlPreview = false;
        
        await Task.Yield(); // Allow UI to update
        
        switch (currentPreviewEntity)
        {
            case "operators":
                await LoadOperators();
                break;
            case "plants":
                await LoadPlants();
                break;
            case "issues":
                await LoadIssues();
                break;
            case "vds_references":
                await LoadVDSReferences();
                break;
        }
    }
}