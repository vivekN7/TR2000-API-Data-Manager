@page "/oracle-etl"
@using TR2KBlazorLibrary.Logic.Services
@using TR2KBlazorLibrary.Models
@inject OracleETLService OracleService
@inject TR2000ApiService ApiService
@inject ILogger<OracleETL> Logger
@rendermode InteractiveServer

<PageTitle>Oracle ETL Management</PageTitle>

<style>
    .sql-preview {
        background-color: #1e1e1e;
        color: #d4d4d4;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
        overflow-x: auto;
    }
    .sql-keyword {
        color: #569cd6;
        font-weight: bold;
    }
    .sql-comment {
        color: #608b4e;
        font-style: italic;
    }
    .step-header {
        background-color: #f8f9fa;
        padding: 10px;
        border-left: 4px solid #007bff;
        margin-bottom: 10px;
    }
    .step-number {
        display: inline-block;
        width: 30px;
        height: 30px;
        background-color: #007bff;
        color: white;
        text-align: center;
        line-height: 30px;
        border-radius: 50%;
        margin-right: 10px;
    }
</style>

<div class="container-fluid">
    <h1>Oracle ETL Management</h1>
    
    <!-- Database Setup Section -->
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-database"></i> 1. Database Setup
            </h5>
        </div>
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-auto">
                    <span class="badge @(isConnected ? "bg-success" : "bg-danger")">
                        @(isConnected ? "● Connected" : "○ Not Connected") to TR2000_STAGING
                    </span>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary" @onclick="TestConnection" disabled="@isLoading">
                        <i class="bi bi-plug"></i> Test Connection
                    </button>
                    <button class="btn btn-info ms-2" @onclick="RefreshTableStatuses" disabled="@(!isConnected || isLoading)">
                        <i class="bi bi-arrow-clockwise"></i> Verify Schema
                    </button>
                    <button class="btn btn-warning ms-2" @onclick="TestHashSupport" disabled="@(!isConnected || isLoading)">
                        <i class="bi bi-hash"></i> Test Hash Functions
                    </button>
                    <button class="btn btn-danger ms-2" @onclick="SimulateDataChange" disabled="@(!isConnected || isLoading)">
                        <i class="bi bi-pencil-square"></i> Simulate Change
                    </button>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(connectionMessage))
            {
                <div class="alert @(connectionMessage.Contains("Success") ? "alert-success" : "alert-danger") mt-3">
                    @connectionMessage
                </div>
            }
        </div>
    </div>

    <!-- Master Data Loading Section -->
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-database-fill-add"></i> 2. Master Data Loading
            </h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Table</th>
                        <th>Status</th>
                        <th>Records</th>
                        <th>Last Load</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>OPERATORS</td>
                        <td>
                            @if (tableStatuses.ContainsKey("OPERATORS"))
                            {
                                var status = tableStatuses["OPERATORS"];
                                if (status.Exists)
                                {
                                    <span class="badge @(status.RecordCount > 0 ? "bg-success" : "bg-warning")">
                                        @(status.RecordCount > 0 ? "✓ Loaded" : "○ Empty")
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Table Not Found</span>
                                }
                            }
                        </td>
                        <td>
                            @(tableStatuses.ContainsKey("OPERATORS") ? tableStatuses["OPERATORS"].RecordCount : 0)
                        </td>
                        <td>
                            @if (tableStatuses.ContainsKey("OPERATORS") && tableStatuses["OPERATORS"].LastLoadTime.HasValue)
                            {
                                @tableStatuses["OPERATORS"].LastLoadTime.Value.ToString("yyyy-MM-dd HH:mm")
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="LoadOperatorsSCD2Native" disabled="@(!isConnected || isLoading)">
                                @if (loadingTable == "operators_scd2_native")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Load</span>
                                }
                            </button>
                            <button class="btn btn-sm btn-info" @onclick="@(() => ShowSqlPreview("operators"))" disabled="@(!isConnected)">
                                <i class="bi bi-code-slash"></i> View SQL
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>PLANTS</td>
                        <td>
                            @if (tableStatuses.ContainsKey("PLANTS"))
                            {
                                var status = tableStatuses["PLANTS"];
                                if (status.Exists)
                                {
                                    <span class="badge @(status.RecordCount > 0 ? "bg-success" : "bg-warning")">
                                        @(status.RecordCount > 0 ? "✓ Loaded" : "○ Empty")
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Table Not Found</span>
                                }
                            }
                        </td>
                        <td>
                            @(tableStatuses.ContainsKey("PLANTS") ? tableStatuses["PLANTS"].RecordCount : 0)
                        </td>
                        <td>
                            @if (tableStatuses.ContainsKey("PLANTS") && tableStatuses["PLANTS"].LastLoadTime.HasValue)
                            {
                                @tableStatuses["PLANTS"].LastLoadTime.Value.ToString("yyyy-MM-dd HH:mm")
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="LoadPlantsSCD2Native" disabled="@(!isConnected || isLoading)">
                                @if (loadingTable == "plants_scd2_native")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Load</span>
                                }
                            </button>
                            <button class="btn btn-sm btn-info" @onclick="@(() => ShowSqlPreview("plants"))" disabled="@(!isConnected)">
                                <i class="bi bi-code-slash"></i> View SQL
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>ISSUES</td>
                        <td>
                            @if (tableStatuses.ContainsKey("ISSUES"))
                            {
                                var status = tableStatuses["ISSUES"];
                                if (status.Exists)
                                {
                                    <span class="badge @(status.RecordCount > 0 ? "bg-success" : "bg-warning")">
                                        @(status.RecordCount > 0 ? "✓ Loaded" : "○ Empty")
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Table Not Found</span>
                                }
                            }
                        </td>
                        <td>
                            @(tableStatuses.ContainsKey("ISSUES") ? tableStatuses["ISSUES"].RecordCount : 0)
                        </td>
                        <td>
                            @if (tableStatuses.ContainsKey("ISSUES") && tableStatuses["ISSUES"].LastLoadTime.HasValue)
                            {
                                @tableStatuses["ISSUES"].LastLoadTime.Value.ToString("yyyy-MM-dd HH:mm")
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="LoadIssues" disabled="@(!isConnected || isLoading)">
                                @if (loadingTable == "issues")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Load All</span>
                                }
                            </button>
                            <button class="btn btn-sm btn-info" @onclick="@(() => ShowSqlPreview("issues"))" disabled="@(!isConnected)">
                                <i class="bi bi-code-slash"></i> View SQL
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
            
            @if (!string.IsNullOrEmpty(loadMessage))
            {
                <div class="alert @(loadMessage.Contains("Success") || loadMessage.Contains("loaded") ? "alert-success" : "alert-warning") mt-3">
                    @loadMessage
                </div>
            }
        </div>
    </div>

    <!-- SQL Preview Section -->
    @if (showSqlPreview && currentSqlPreview != null)
    {
        <div class="card mb-3">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">
                    <i class="bi bi-code-slash"></i> @currentSqlPreview.Title
                </h5>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> <strong>What happens when you click Load:</strong>
                    <br/>@currentSqlPreview.Description
                </div>
                
                @foreach (var step in currentSqlPreview.Steps)
                {
                    <div class="step-header">
                        <span class="step-number">@step.StepNumber</span>
                        <strong>@step.Title</strong>
                        <br/>
                        <small class="text-muted">@step.Description</small>
                    </div>
                    <div class="sql-preview">
                        <pre>@step.SqlStatement</pre>
                    </div>
                }
                
                <div class="alert alert-warning mt-3">
                    <i class="bi bi-lightbulb"></i> <strong>Key Concepts:</strong>
                    <ul class="mb-0">
                        <li><strong>SCD Type 2</strong>: Slowly Changing Dimension - keeps all historical data</li>
                        <li><strong>IS_CURRENT flag</strong>: 'Y' = current data, 'N' = historical data</li>
                        <li><strong>EXTRACTION_DATE</strong>: Timestamp when data was loaded</li>
                        <li><strong>ETL_RUN_ID</strong>: Links all records from same load operation</li>
                    </ul>
                </div>
                
                <div class="alert alert-success mt-3">
                    <i class="bi bi-shield-check"></i> <strong>Data Safety Guaranteed:</strong>
                    <ul class="mb-0">
                        <li><strong>Transaction Protection</strong>: ALL operations wrapped in database transactions</li>
                        <li><strong>Automatic Rollback</strong>: ANY error = NO data changes (your data is safe!)</li>
                        <li><strong>API First</strong>: Data fetched BEFORE any database modifications</li>
                        <li><strong>Zero Data Loss</strong>: Failed operations leave existing data untouched</li>
                        <li><strong>Full Audit Trail</strong>: All errors logged to ETL_ERROR_LOG table</li>
                    </ul>
                    <small class="text-muted">Learn more: See <code>/workspace/TR2000/TR2K/Ops/ETL_Error_Handling_Guide.md</code></small>
                </div>
                
                <button class="btn btn-secondary" @onclick="() => showSqlPreview = false">
                    <i class="bi bi-x"></i> Close Preview
                </button>
            </div>
        </div>
    }

    <!-- Last ETL Result Details -->
    @if (lastETLResult != null && lastETLResult.SqlStatements.Any())
    {
        <div class="card mb-3">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">
                    <i class="bi bi-check-circle"></i> Last ETL Operation Results
                </h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-2">
                        <strong>Status:</strong> <span class="badge @(lastETLResult.Status == "SUCCESS" ? "bg-success" : "bg-danger")">@lastETLResult.Status</span>
                    </div>
                    <div class="col-md-2">
                        <strong>Records:</strong> <span class="badge bg-dark">@lastETLResult.RecordsLoaded</span>
                    </div>
                    <div class="col-md-2">
                        <strong>API Calls:</strong> <span class="badge bg-info">@(lastETLResult.ApiCallCount > 0 ? lastETLResult.ApiCallCount : 1)</span>
                    </div>
                    <div class="col-md-2">
                        <strong>Duration:</strong> @lastETLResult.FormattedDuration
                    </div>
                    <div class="col-md-2">
                        <strong>Speed:</strong> @lastETLResult.RecordsPerSecond.ToString("F1") rec/s
                    </div>
                    <div class="col-md-2">
                        <strong>Efficiency:</strong> <span class="badge bg-success">@((lastETLResult.RecordsLoaded / (double)Math.Max(lastETLResult.ApiCallCount, 1)).ToString("F1")) rec/API</span>
                    </div>
                </div>
                
                @if (lastETLResult.PlantIterations > 0 || lastETLResult.IssueIterations > 0)
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>Plants Processed:</strong> <span class="badge bg-primary">@lastETLResult.PlantIterations</span>
                        </div>
                        <div class="col-md-6">
                            <strong>Issues Processed:</strong> <span class="badge bg-secondary">@lastETLResult.IssueIterations</span>
                        </div>
                    </div>
                }
                
                @if (lastETLResult.RecordsUpdated > 0 || lastETLResult.RecordsUnchanged > 0)
                {
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <strong>New Records:</strong> <span class="badge bg-success">@lastETLResult.RecordsLoaded</span>
                        </div>
                        <div class="col-md-4">
                            <strong>Updated:</strong> <span class="badge bg-warning text-dark">@lastETLResult.RecordsUpdated</span>
                        </div>
                        <div class="col-md-4">
                            <strong>Unchanged:</strong> <span class="badge bg-secondary">@lastETLResult.RecordsUnchanged</span>
                        </div>
                    </div>
                }
                
                <details>
                    <summary class="cursor-pointer"><strong>View SQL Executed</strong></summary>
                    <div class="sql-preview mt-2">
                        <pre>@string.Join("\n\n", lastETLResult.SqlStatements)</pre>
                    </div>
                </details>
            </div>
        </div>
    }
    
    <!-- Plant Loader Configuration Section -->
    <div class="card mb-3">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
                <i class="bi bi-gear-fill"></i> 3. Plant Loader Configuration
            </h5>
        </div>
        <div class="card-body">
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> <strong>Important:</strong> Select which plants to load data for. This dramatically reduces API calls by only processing selected plants.
            </div>
            
            @if (!plantLoaderTableExists)
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i> Plant loader table does not exist. 
                    <button class="btn btn-sm btn-success ms-2" @onclick="CreatePlantLoaderTable" disabled="@(!isConnected || isLoading)">
                        Create Loader Table
                    </button>
                </div>
            }
            else
            {
                <div class="row mb-3">
                    <div class="col-md-8">
                        <h6>Add Plant to Loader</h6>
                        <div class="input-group">
                            <select class="form-select" @bind="selectedPlantToAdd" disabled="@(!isConnected || isLoading)">
                                <option value="">-- Select Plant --</option>
                                @foreach (var plant in availablePlants)
                                {
                                    <option value="@plant.PlantId">@plant.PlantName (@plant.LongDescription) - ID: @plant.PlantId</option>
                                }
                            </select>
                            <button class="btn btn-success" @onclick="AddPlantToLoader" disabled="@(!isConnected || isLoading || string.IsNullOrEmpty(selectedPlantToAdd))">
                                <i class="bi bi-plus-circle"></i> Add to Loader
                            </button>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-info w-100" @onclick="RefreshPlantLoader" disabled="@(!isConnected || isLoading)">
                            <i class="bi bi-arrow-clockwise"></i> Refresh List
                        </button>
                    </div>
                </div>
                
                <h6>Configured Plants for Loading</h6>
                @if (plantLoaderConfigs.Any())
                {
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>Active</th>
                                <th>Plant ID</th>
                                <th>Plant Name</th>
                                <th>Description</th>
                                <th>Priority</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var config in plantLoaderConfigs.OrderBy(c => c.LoadPriority).ThenBy(c => c.PlantId))
                            {
                                <tr class="@(config.IsActive ? "" : "table-secondary")">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked="@config.IsActive" 
                                                   @onchange="@(async (e) => await TogglePlantActive(config.PlantId, (bool)e.Value))"
                                                   disabled="@(!isConnected || isLoading)">
                                        </div>
                                    </td>
                                    <td>@config.PlantId</td>
                                    <td>@config.PlantName</td>
                                    <td>@config.LongDescription</td>
                                    <td>@config.LoadPriority</td>
                                    <td>@config.Notes</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="@(() => RemovePlantFromLoader(config.PlantId))" 
                                                disabled="@(!isConnected || isLoading)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    
                    <div class="alert alert-success mt-3">
                        <strong>Active Plants for Loading:</strong> @string.Join(", ", plantLoaderConfigs.Where(c => c.IsActive).Select(c => $"{c.PlantName} ({c.PlantId})"))
                    </div>
                }
                else
                {
                    <div class="alert alert-warning">
                        No plants configured in loader table. Add plants above to enable selective loading.
                    </div>
                }
            }
        </div>
    </div>

    <!-- Reference Data Loading Section -->
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-link-45deg"></i> 4. Reference Data Loading
            </h5>
        </div>
        <div class="card-body">
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> Reference tables link issues to their referenced specifications (PCS, SC, VSM, etc.)
                <br/>Note: Loading reference data iterates through all plants and issues - this may take several minutes.
            </div>
            
            <div class="row mb-3">
                <div class="col-md-4">
                    <button class="btn btn-primary w-100" @onclick="LoadPCSReferences" disabled="@(!isConnected || isLoading)">
                        @if (isLoading && loadingTable == "PCS_REFERENCES")
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Loading PCS References...</span>
                        }
                        else
                        {
                            <i class="bi bi-download"></i>
                            <span>Load PCS References</span>
                        }
                    </button>
                    <small class="text-muted d-block mt-1">Links issues to PCS specifications</small>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary w-100" @onclick="LoadSCReferences" disabled="@(!isConnected || isLoading)">
                        @if (isLoading && loadingTable == "SC_REFERENCES")
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Loading SC References...</span>
                        }
                        else
                        {
                            <i class="bi bi-download"></i>
                            <span>Load SC References</span>
                        }
                    </button>
                    <small class="text-muted d-block mt-1">Links issues to SC specifications</small>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary w-100" @onclick="LoadVSMReferences" disabled="@(!isConnected || isLoading)">
                        @if (isLoading && loadingTable == "VSM_REFERENCES")
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Loading VSM References...</span>
                        }
                        else
                        {
                            <i class="bi bi-download"></i>
                            <span>Load VSM References</span>
                        }
                    </button>
                    <small class="text-muted d-block mt-1">Links issues to VSM specifications</small>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-success" @onclick="LoadAllReferences" disabled="@(!isConnected || isLoading)">
                        @if (isLoading && loadingTable == "ALL_REFERENCES")
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Loading All References...</span>
                        }
                        else
                        {
                            <i class="bi bi-download"></i>
                            <span>Load All Reference Tables</span>
                        }
                    </button>
                    <span class="ms-3 text-muted">
                        <i class="bi bi-clock"></i> This may take 5-10 minutes
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- ETL Run History Section -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-clock-history"></i> 5. ETL Run History
            </h5>
        </div>
        <div class="card-body">
            @if (etlHistory.Any())
            {
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Run ID</th>
                            <th>Date/Time</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Records</th>
                            <th>Errors</th>
                            <th>Comments</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var run in etlHistory)
                        {
                            <tr>
                                <td>@run.RunId</td>
                                <td>@run.RunDate.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@run.RunType</td>
                                <td>
                                    <span class="badge @(run.Status == "SUCCESS" ? "bg-success" : run.Status == "FAILED" ? "bg-danger" : "bg-warning")">
                                        @run.Status
                                    </span>
                                </td>
                                <td>@run.RecordsLoaded</td>
                                <td>@run.ErrorCount</td>
                                <td>@run.Comments</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No ETL runs yet</p>
            }
        </div>
    </div>
</div>

@code {
    private bool isConnected = false;
    private bool isLoading = false;
    private bool showSqlPreview = false;
    private string connectionMessage = "";
    private string loadMessage = "";
    private string loadingTable = "";
    
    private Dictionary<string, TableStatus> tableStatuses = new();
    private List<ETLRunHistory> etlHistory = new();
    private ETLSqlPreview? currentSqlPreview = null;
    private ETLResult? lastETLResult = null;
    
    // Plant Loader Configuration
    private bool plantLoaderTableExists = false;
    private List<PlantLoaderConfig> plantLoaderConfigs = new();
    private List<PlantInfo> availablePlants = new();
    private string selectedPlantToAdd = "";
    
    private class PlantInfo
    {
        public string PlantId { get; set; } = "";
        public string PlantName { get; set; } = "";
        public string LongDescription { get; set; } = "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        await TestConnection();
        if (isConnected)
        {
            await RefreshTableStatuses();
            await RefreshETLHistory();
            await CheckPlantLoaderTable();
            await LoadAvailablePlants();
        }
    }
    
    private async Task TestConnection()
    {
        isLoading = true;
        connectionMessage = "";
        StateHasChanged();
        
        try
        {
            isConnected = await OracleService.TestConnection();
            connectionMessage = isConnected 
                ? "Successfully connected to Oracle database!" 
                : "Failed to connect to Oracle database. Check connection settings.";
        }
        catch (Exception ex)
        {
            connectionMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to test connection");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task TestHashSupport()
    {
        isLoading = true;
        connectionMessage = "";
        StateHasChanged();
        
        try
        {
            var result = await OracleService.TestOracleHashSupport();
            connectionMessage = result;
        }
        catch (Exception ex)
        {
            connectionMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to test hash support");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task SimulateDataChange()
    {
        isLoading = true;
        connectionMessage = "";
        StateHasChanged();
        
        try
        {
            var result = await OracleService.SimulateDataChange();
            connectionMessage = result;
                
            if (isConnected)
            {
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
        }
        catch (Exception ex)
        {
            connectionMessage = $"Error: {ex.Message}";
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task CreateAllTables()
    {
        isLoading = true;
        connectionMessage = "";
        StateHasChanged();
        
        try
        {
            var success = await OracleService.CreateAllTables();
            connectionMessage = success 
                ? "All tables created successfully!" 
                : "Failed to create some tables. Check logs for details.";
                
            if (success)
            {
                await RefreshTableStatuses();
            }
        }
        catch (Exception ex)
        {
            connectionMessage = $"Error creating tables: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task DropAllTables()
    {
        isLoading = true;
        connectionMessage = "";
        StateHasChanged();
        
        try
        {
            var success = await OracleService.DropAllTables();
            connectionMessage = success 
                ? "All tables dropped successfully!" 
                : "Failed to drop some tables. Check logs for details.";
                
            await RefreshTableStatuses();
        }
        catch (Exception ex)
        {
            connectionMessage = $"Error dropping tables: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task RefreshTableStatuses()
    {
        try
        {
            tableStatuses = await OracleService.GetTableStatuses();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh table statuses");
        }
    }
    
    private async Task RefreshETLHistory()
    {
        try
        {
            etlHistory = await OracleService.GetETLHistory(10);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh ETL history");
        }
    }
    
    private void ShowSqlPreview(string tableName)
    {
        showSqlPreview = true;
        currentSqlPreview = tableName switch
        {
            "operators" => OracleService.GetLoadOperatorsSqlPreview(),
            "plants" => OracleService.GetLoadPlantsSqlPreview(),
            "issues" => OracleService.GetLoadIssuesSqlPreview(),
            _ => null
        };
        StateHasChanged();
    }
    
    private async Task LoadOperatorsSCD2Native()
    {
        isLoading = true;
        loadingTable = "operators_scd2_native";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            var result = await OracleService.LoadOperatorsSCD2Native();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"SCD2 Processing Complete: {result.RecordsLoaded} new, {result.RecordsUpdated} updated, {result.RecordsUnchanged} unchanged";
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
            else
            {
                loadMessage = $"Failed to load operators: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading operators: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadPlantsSCD2Native()
    {
        isLoading = true;
        loadingTable = "plants_scd2_native";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            var result = await OracleService.LoadPlantsSCD2Native();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"SCD2 Processing Complete: {result.RecordsLoaded} new, {result.RecordsUpdated} updated, {result.RecordsUnchanged} unchanged";
                await RefreshTableStatuses();
                await RefreshETLHistory();
                await LoadAvailablePlants(); // Refresh available plants dropdown
            }
            else
            {
                loadMessage = $"Failed to load plants: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading plants: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadIssues()
    {
        isLoading = true;
        loadingTable = "issues";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            loadMessage = "Loading issues for all plants... This may take a moment.";
            StateHasChanged();
            
            var result = await OracleService.LoadIssues();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"Successfully loaded {result.RecordsLoaded} issues!";
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
            else
            {
                loadMessage = $"Failed to load issues: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading issues: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadPCSReferences()
    {
        isLoading = true;
        loadingTable = "PCS_REFERENCES";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            loadMessage = "Loading PCS references for all plants and issues... This may take several minutes.";
            StateHasChanged();
            
            var result = await OracleService.LoadPCSReferencesForSelectedPlants();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"Successfully loaded {result.RecordsLoaded} PCS references!";
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
            else if (result.Status == "NO_DATA")
            {
                loadMessage = "No PCS references found to load.";
            }
            else
            {
                loadMessage = $"Failed to load PCS references: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading PCS references: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadSCReferences()
    {
        isLoading = true;
        loadingTable = "SC_REFERENCES";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            loadMessage = "Loading SC references for all plants and issues... This may take several minutes.";
            StateHasChanged();
            
            var result = await OracleService.LoadSCReferences();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"Successfully loaded {result.RecordsLoaded} SC references!";
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
            else if (result.Status == "NO_DATA")
            {
                loadMessage = "No SC references found to load.";
            }
            else
            {
                loadMessage = $"Failed to load SC references: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading SC references: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadVSMReferences()
    {
        isLoading = true;
        loadingTable = "VSM_REFERENCES";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            loadMessage = "Loading VSM references for all plants and issues... This may take several minutes.";
            StateHasChanged();
            
            var result = await OracleService.LoadVSMReferences();
            lastETLResult = result;
            
            if (result.Status == "SUCCESS")
            {
                loadMessage = $"Successfully loaded {result.RecordsLoaded} VSM references!";
                await RefreshTableStatuses();
                await RefreshETLHistory();
            }
            else if (result.Status == "NO_DATA")
            {
                loadMessage = "No VSM references found to load.";
            }
            else
            {
                loadMessage = $"Failed to load VSM references: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading VSM references: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    private async Task LoadAllReferences()
    {
        isLoading = true;
        loadingTable = "ALL_REFERENCES";
        loadMessage = "";
        showSqlPreview = false;
        StateHasChanged();
        
        try
        {
            loadMessage = "Loading all reference tables... This may take 5-10 minutes.";
            StateHasChanged();
            
            int totalRecords = 0;
            var errors = new List<string>();
            
            // Load PCS References
            loadMessage = "Loading PCS references...";
            StateHasChanged();
            var pcsResult = await OracleService.LoadPCSReferences();
            if (pcsResult.Status == "SUCCESS")
                totalRecords += pcsResult.RecordsLoaded;
            else if (pcsResult.Status == "ERROR")
                errors.Add($"PCS: {pcsResult.Message}");
            
            // Load SC References
            loadMessage = "Loading SC references...";
            StateHasChanged();
            var scResult = await OracleService.LoadSCReferences();
            if (scResult.Status == "SUCCESS")
                totalRecords += scResult.RecordsLoaded;
            else if (scResult.Status == "ERROR")
                errors.Add($"SC: {scResult.Message}");
            
            // Load VSM References
            loadMessage = "Loading VSM references...";
            StateHasChanged();
            var vsmResult = await OracleService.LoadVSMReferences();
            if (vsmResult.Status == "SUCCESS")
                totalRecords += vsmResult.RecordsLoaded;
            else if (vsmResult.Status == "ERROR")
                errors.Add($"VSM: {vsmResult.Message}");
            
            if (errors.Any())
            {
                loadMessage = $"Loaded {totalRecords} records with {errors.Count} errors: {string.Join("; ", errors)}";
            }
            else
            {
                loadMessage = $"Successfully loaded all reference tables! Total records: {totalRecords}";
            }
            
            await RefreshTableStatuses();
            await RefreshETLHistory();
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading reference tables: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            loadingTable = "";
            StateHasChanged();
        }
    }
    
    // Plant Loader Configuration Methods
    private async Task CheckPlantLoaderTable()
    {
        try
        {
            // Check if the table exists by trying to fetch configs
            var configs = await OracleService.GetPlantLoaderConfigs();
            plantLoaderTableExists = true;
            plantLoaderConfigs = configs;
        }
        catch
        {
            plantLoaderTableExists = false;
        }
    }
    
    private async Task LoadAvailablePlants()
    {
        try
        {
            // Get all plants from the PLANTS table
            var allPlantsData = await OracleService.GetAllPlants();
            
            availablePlants = allPlantsData.Select(p => new PlantInfo
            {
                PlantId = p["PLANT_ID"]?.ToString() ?? "",
                PlantName = p["PLANT_NAME"]?.ToString() ?? "",
                LongDescription = p["LONG_DESCRIPTION"]?.ToString() ?? ""
            }).ToList();
            
            // Remove plants that are already in the loader
            var existingPlantIds = plantLoaderConfigs.Select(c => c.PlantId).ToHashSet();
            availablePlants = availablePlants.Where(p => !existingPlantIds.Contains(p.PlantId)).ToList();
        }
        catch (Exception ex)
        {
            loadMessage = $"Error loading available plants: {ex.Message}";
        }
    }
    
    private async Task CreatePlantLoaderTable()
    {
        isLoading = true;
        loadMessage = "";
        StateHasChanged();
        
        try
        {
            var success = await OracleService.CreatePlantLoaderTable();
            if (success)
            {
                loadMessage = "Successfully created ETL_PLANT_LOADER table";
                plantLoaderTableExists = true;
                await RefreshPlantLoader();
            }
            else
            {
                loadMessage = "Failed to create plant loader table";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error creating plant loader table: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task RefreshPlantLoader()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            plantLoaderConfigs = await OracleService.GetPlantLoaderConfigs();
            await LoadAvailablePlants();
            loadMessage = $"Loaded {plantLoaderConfigs.Count} plant configurations";
        }
        catch (Exception ex)
        {
            loadMessage = $"Error refreshing plant loader: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task AddPlantToLoader()
    {
        if (string.IsNullOrEmpty(selectedPlantToAdd))
            return;
            
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var plant = availablePlants.FirstOrDefault(p => p.PlantId == selectedPlantToAdd);
            if (plant != null)
            {
                var success = await OracleService.AddPlantToLoader(plant.PlantId, plant.PlantName, "Added via UI");
                if (success)
                {
                    loadMessage = $"Added plant {plant.PlantName} to loader";
                    selectedPlantToAdd = "";
                    await RefreshPlantLoader();
                }
                else
                {
                    loadMessage = $"Failed to add plant {plant.PlantName}";
                }
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error adding plant: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task TogglePlantActive(string plantId, bool isActive)
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var success = await OracleService.TogglePlantActive(plantId, isActive);
            if (success)
            {
                loadMessage = $"Updated plant {plantId} active status";
                await RefreshPlantLoader();
            }
            else
            {
                loadMessage = $"Failed to update plant {plantId}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error toggling plant: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task RemovePlantFromLoader(string plantId)
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var success = await OracleService.RemovePlantFromLoader(plantId);
            if (success)
            {
                loadMessage = $"Removed plant {plantId} from loader";
                await RefreshPlantLoader();
            }
            else
            {
                loadMessage = $"Failed to remove plant {plantId}";
            }
        }
        catch (Exception ex)
        {
            loadMessage = $"Error removing plant: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}