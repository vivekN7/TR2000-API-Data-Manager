@page "/oracle-etl-v2"
@using TR2KBlazorLibrary.Logic.Services
@using TR2KBlazorLibrary.Models
@inject OracleETLServiceV2 ETLService
@inject ILogger<OracleETLV2> Logger
@rendermode InteractiveServer

<h3>Oracle ETL - Production SCD2 Implementation</h3>

<div class="alert alert-info">
    <h5>✅ New Production-Ready Implementation</h5>
    <ul>
        <li>Complete SCD2 with INSERT, UPDATE, DELETE, REACTIVATE tracking</li>
        <li>All logic in Oracle stored procedures</li>
        <li>C# only fetches data and calls orchestrator</li>
        <li>Atomic transactions with automatic rollback</li>
        <li>RAW_JSON audit trail with automatic 30-day cleanup (no DBA required)</li>
    </ul>
</div>

<!-- Educational Section: Understanding SCD2 -->
<div class="card mb-3 border-primary">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="bi bi-mortarboard"></i> Understanding SCD2 (Slowly Changing Dimension Type 2)
        </h5>
    </div>
    <div class="card-body">
        <p><strong>What is SCD2?</strong> A data warehousing technique that tracks historical changes by creating new records for each change while preserving old records.</p>
        
        <h6>Key Concepts:</h6>
        <ul>
            <li><strong>VALID_FROM/VALID_TO</strong>: Temporal boundaries showing when a record was active</li>
            <li><strong>IS_CURRENT</strong>: Flag indicating the current version (Y/N)</li>
            <li><strong>CHANGE_TYPE</strong>: Tracks the operation (INSERT, UPDATE, DELETE, REACTIVATE)</li>
            <li><strong>SRC_HASH</strong>: SHA256 hash of all fields to detect changes</li>
        </ul>

        <h6>Our Implementation Handles:</h6>
        <ol>
            <li><strong>INSERT</strong>: New records from API → Create with IS_CURRENT='Y'</li>
            <li><strong>UPDATE</strong>: Changed records → Close old (IS_CURRENT='N'), create new version</li>
            <li><strong>DELETE</strong>: Missing from API → Mark with DELETE_DATE, IS_CURRENT='N'</li>
            <li><strong>REACTIVATE</strong>: Deleted record returns → Create new version with CHANGE_TYPE='REACTIVATE'</li>
            <li><strong>UNCHANGED</strong>: No changes detected → Skip processing</li>
        </ol>
    </div>
</div>

<!-- Educational Section: ETL Process Flow -->
<div class="card mb-3 border-success">
    <div class="card-header bg-success text-white">
        <h5 class="mb-0">
            <i class="bi bi-diagram-3"></i> ETL Process Flow - What Happens Behind the Scenes
        </h5>
    </div>
    <div class="card-body">
        <h6>When you click "Load Operators" or "Load Plants":</h6>
        
        <div class="row">
            <div class="col-md-6">
                <h6 class="text-primary">Step 1: C# Service (Minimal)</h6>
                <ol>
                    <li>Fetch data from TR2000 API</li>
                    <li>Get next ETL_RUN_ID from sequence</li>
                    <li>Bulk insert into STG_* staging tables</li>
                    <li>Call SP_PROCESS_ETL_BATCH orchestrator</li>
                    <li>Return results to UI</li>
                </ol>
            </div>
            <div class="col-md-6">
                <h6 class="text-primary">Step 2: Oracle Orchestrator (All Logic)</h6>
                <ol>
                    <li><strong>Deduplication</strong>: Remove duplicates using ROW_NUMBER()</li>
                    <li><strong>Validation</strong>: Check business rules, mark invalid records</li>
                    <li><strong>SCD2 Processing</strong>: Apply temporal logic (5 sub-steps)</li>
                    <li><strong>Reconciliation</strong>: Count source vs target records</li>
                    <li><strong>COMMIT</strong>: Single atomic transaction</li>
                </ol>
            </div>
        </div>

        <div class="alert alert-warning mt-3">
            <strong>Key Safety Features:</strong>
            <ul class="mb-0">
                <li>API data fetched BEFORE starting transaction (prevents locks)</li>
                <li>Autonomous error logging (survives rollbacks)</li>
                <li>All-or-nothing: Complete success or complete rollback</li>
                <li>No partial updates possible</li>
            </ul>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(statusMessage.Contains("Error") ? "alert-danger" : statusMessage.Contains("Success") ? "alert-success" : "alert-info")">
        @statusMessage
    </div>
}

<!-- SQL Preview Modal -->
@if (showSqlPreview && currentSqlPreview != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-code-slash"></i> @currentSqlPreview.Title
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showSqlPreview = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> <strong>What happens when you click Load:</strong>
                        <br/>@currentSqlPreview.Description
                    </div>

                    @foreach (var step in currentSqlPreview.Steps)
                    {
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    Step @step.StepNumber: @step.Title
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="text-muted">@step.Description</p>
                                <pre class="bg-dark text-light p-3 rounded" style="font-size: 0.9rem; overflow-x: auto;">@step.SqlStatement</pre>
                            </div>
                        </div>
                    }

                    <div class="alert alert-warning">
                        <h6><i class="bi bi-shield-check"></i> Data Integrity Features:</h6>
                        <ul>
                            <li><strong>Atomic Transactions</strong>: All-or-nothing processing</li>
                            <li><strong>Autonomous Error Logging</strong>: Errors recorded even if transaction rolls back</li>
                            <li><strong>Hash-based Change Detection</strong>: Only changed records are processed</li>
                            <li><strong>Soft Deletes</strong>: Records never physically deleted, marked with DELETE_DATE</li>
                            <li><strong>Full Audit Trail</strong>: Every change tracked with CHANGE_TYPE and timestamps</li>
                        </ul>
                    </div>

                    <div class="alert alert-success">
                        <h6><i class="bi bi-clock-history"></i> Data Retention Policies:</h6>
                        <ul>
                            <li><strong>Dimension Tables (OPERATORS, PLANTS, ISSUES)</strong>: <span class="badge bg-success">PERMANENT</span> - Full history forever</li>
                            <li><strong>Staging Tables (STG_*)</strong>: <span class="badge bg-warning">TEMPORARY</span> - Cleared after each successful run</li>
                            <li><strong>ETL_CONTROL</strong>: <span class="badge bg-info">10 RUNS</span> - Cleaned after each ETL (automatic)</li>
                            <li><strong>ETL_ERROR_LOG</strong>: <span class="badge bg-danger">30 DAYS</span> - Cleaned after each ETL (automatic)</li>
                            <li><strong>RAW_JSON</strong>: <span class="badge bg-info">30 DAYS</span> - Cleaned after each ETL (automatic)</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showSqlPreview = false">
                        <i class="bi bi-x"></i> Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ExecuteAfterPreview" disabled="@isLoading">
                        <i class="bi bi-play-fill"></i> Execute Now
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <!-- Section 1: Database Setup -->
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">
                <h5>1. Database Setup</h5>
            </div>
            <div class="card-body">
                <button class="btn btn-info mb-2" @onclick="TestConnection" disabled="@isLoading">
                    Test Connection
                </button>
                
                @if (connectionStatus)
                {
                    <div class="alert alert-success">✅ Connected to Oracle</div>
                }
            </div>
        </div>
    </div>

    <!-- Section 2: Master Data ETL -->
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header bg-success text-white">
                <h5>2. Master Data ETL</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <button class="btn btn-primary mb-2" @onclick="LoadOperators" disabled="@isLoading">
                            <i class="bi bi-play-fill"></i> Load Operators (SCD2)
                        </button>
                        <button class="btn btn-outline-info mb-2 ms-2" @onclick='() => ShowSqlPreview("operators")' disabled="@isLoading">
                            <i class="bi bi-code-slash"></i> Preview SQL
                        </button>
                    </div>
                    <div class="col-md-6">
                        <button class="btn btn-primary mb-2" @onclick="LoadPlants" disabled="@isLoading">
                            <i class="bi bi-play-fill"></i> Load Plants (SCD2)
                        </button>
                        <button class="btn btn-outline-info mb-2 ms-2" @onclick='() => ShowSqlPreview("plants")' disabled="@isLoading">
                            <i class="bi bi-code-slash"></i> Preview SQL
                        </button>
                    </div>
                    <div class="col-md-12">
                        <button class="btn btn-primary mb-2" @onclick="LoadIssues" disabled="@isLoading">
                            <i class="bi bi-play-fill"></i> Load Issues (SCD2)
                        </button>
                        <button class="btn btn-outline-info mb-2 ms-2" @onclick='() => ShowSqlPreview("issues")' disabled="@isLoading">
                            <i class="bi bi-code-slash"></i> Preview SQL
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Section 3: Current Table Status -->
<div class="card mb-3">
    <div class="card-header bg-info text-white">
        <h5>3. Current Table Status</h5>
    </div>
    <div class="card-body">
        <button class="btn btn-sm btn-secondary mb-2" @onclick="RefreshStatus" disabled="@isLoading">
            Refresh Status
        </button>
        
        @if (tableStatuses != null && tableStatuses.Any())
        {
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Table</th>
                        <th>Current Records</th>
                        <th>Historical Records</th>
                        <th>Total</th>
                        <th>Last Modified</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var status in tableStatuses)
                    {
                        <tr>
                            <td>@status.TableName</td>
                            <td><span class="badge bg-success">@status.CurrentRows</span></td>
                            <td><span class="badge bg-secondary">@status.HistoricalRows</span></td>
                            <td><span class="badge bg-primary">@status.TotalRows</span></td>
                            <td>@status.LastModified?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<!-- Educational Section: Oracle Database Objects -->
<div class="card mb-3 border-warning">
    <div class="card-header bg-warning text-dark">
        <h5 class="mb-0">
            <i class="bi bi-database"></i> Oracle Database Objects Used
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <h6>Staging Tables (Temporary)</h6>
                <ul class="small">
                    <li><code>STG_OPERATORS</code></li>
                    <li><code>STG_PLANTS</code></li>
                    <li><code>STG_ISSUES</code></li>
                    <li><code>STG_PCS_REFERENCES</code></li>
                    <li><code>STG_SC_REFERENCES</code></li>
                    <li><code>STG_VSM_REFERENCES</code></li>
                    <li class="text-muted">Auto-cleared after ETL</li>
                </ul>
            </div>
            <div class="col-md-3">
                <h6>Dimension Tables (SCD2)</h6>
                <ul class="small">
                    <li><code>OPERATORS</code> (8 records)</li>
                    <li><code>PLANTS</code> (130 records)</li>
                    <li><code>ISSUES</code> (varies)</li>
                    <li><code>PCS_REFERENCES</code></li>
                    <li><code>SC_REFERENCES</code></li>
                    <li><code>VSM_REFERENCES</code></li>
                    <li class="text-muted">Full history forever</li>
                </ul>
            </div>
            <div class="col-md-3">
                <h6>Control & Audit</h6>
                <ul class="small">
                    <li><code>ETL_CONTROL</code> - Runs</li>
                    <li><code>ETL_ERROR_LOG</code> - Errors</li>
                    <li><code>ETL_RECONCILIATION</code> - Counts</li>
                    <li><code>ETL_PLANT_LOADER</code> - Scope</li>
                    <li><code>RAW_JSON</code> - API audit</li>
                    <li class="text-muted">10-30 day retention</li>
                </ul>
            </div>
            <div class="col-md-3">
                <h6>Key Features</h6>
                <ul class="small">
                    <li><strong>VALID_FROM/TO</strong> - Time range</li>
                    <li><strong>IS_CURRENT</strong> - Y/N flag</li>
                    <li><strong>CHANGE_TYPE</strong> - Action</li>
                    <li><strong>DELETE_DATE</strong> - Soft delete</li>
                    <li><strong>SRC_HASH</strong> - SHA256</li>
                    <li class="text-muted">100% audit trail</li>
                </ul>
            </div>
        </div>
        
        <h6 class="mt-3">Key Stored Procedures & Packages:</h6>
        <div class="row">
            <div class="col-md-6">
                <ul class="small">
                    <li><code>SP_PROCESS_ETL_BATCH</code> - Master orchestrator</li>
                    <li><code>SP_DEDUPLICATE_STAGING</code> - Remove duplicates</li>
                    <li><code>SP_PURGE_RAW_JSON</code> - Cleanup audit trail</li>
                    <li><code>SP_INSERT_RAW_JSON</code> - Store API responses</li>
                    <li><code>SP_CLEANUP_ETL_HISTORY</code> - Maintain history</li>
                    <li><code>LOG_ETL_ERROR</code> - Autonomous logging</li>
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="small">
                    <li><code>PKG_OPERATORS_ETL</code> - VALIDATE, PROCESS_SCD2, RECONCILE</li>
                    <li><code>PKG_PLANTS_ETL</code> - VALIDATE, PROCESS_SCD2, RECONCILE</li>
                    <li><code>PKG_ISSUES_ETL</code> - VALIDATE, PROCESS_SCD2, RECONCILE</li>
                    <li class="text-muted mt-2">Each package handles:</li>
                    <li class="text-muted">• Deletions, Reactivations, Updates, Inserts</li>
                    <li class="text-muted">• Hash computation, Change detection</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Educational Section: Testing SCD2 -->
<div class="card mb-3 border-info">
    <div class="card-header bg-info text-white">
        <h5 class="mb-0">
            <i class="bi bi-check2-square"></i> How to Test SCD2 is Working
        </h5>
    </div>
    <div class="card-body">
        <h6>Test Scenarios:</h6>
        <ol>
            <li><strong>First Load</strong>: Click "Load Operators" → All records show CHANGE_TYPE='INSERT'</li>
            <li><strong>No Changes</strong>: Click "Load Operators" again → Records show as UNCHANGED (0 inserted)</li>
            <li><strong>Manual Update</strong>: Update a record in Oracle → Next load creates new version with CHANGE_TYPE='UPDATE'</li>
            <li><strong>Deletion Test</strong>: Delete from staging → Record marked with DELETE_DATE</li>
            <li><strong>Reactivation</strong>: Re-add deleted record → New version with CHANGE_TYPE='REACTIVATE'</li>
        </ol>
        
        <h6>SQL Queries to Verify:</h6>
        <pre class="bg-light p-2"><code>-- View current records only
SELECT * FROM V_OPERATORS_CURRENT;
SELECT * FROM V_PLANTS_CURRENT;

-- View full audit trail
SELECT * FROM V_AUDIT_TRAIL ORDER BY VALID_FROM DESC;

-- See changes for specific entity
SELECT * FROM OPERATORS WHERE OPERATOR_ID = 1 ORDER BY VALID_FROM;</code></pre>
    </div>
</div>

<!-- Section 4: ETL History -->
<div class="card mb-3">
    <div class="card-header bg-dark text-white">
        <h5>4. ETL Run History</h5>
    </div>
    <div class="card-body">
        @if (etlHistory != null && etlHistory.Any())
        {
            <table class="table table-sm table-striped">
                <thead>
                    <tr>
                        <th>Run ID</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Start Time</th>
                        <th>Duration (s)</th>
                        <th>Loaded</th>
                        <th>Updated</th>
                        <th>Deleted</th>
                        <th>Reactivated</th>
                        <th>Unchanged</th>
                        <th>API Calls</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var run in etlHistory)
                    {
                        <tr class="@(run.Status == "SUCCESS" ? "" : "table-danger")">
                            <td>@run.RunId</td>
                            <td>@run.RunType</td>
                            <td>
                                <span class="badge @(run.Status == "SUCCESS" ? "bg-success" : "bg-danger")">
                                    @run.Status
                                </span>
                            </td>
                            <td>@run.StartTime?.ToString("HH:mm:ss")</td>
                            <td>@run.ProcessingTimeSeconds?.ToString("F2")</td>
                            <td>@run.RecordsLoaded</td>
                            <td>@run.RecordsUpdated</td>
                            <td>@run.RecordsDeleted</td>
                            <td>@run.RecordsReactivated</td>
                            <td>@run.RecordsUnchanged</td>
                            <td>@run.ApiCallCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No ETL runs yet.</p>
        }
    </div>
</div>

<!-- Loading Spinner -->
@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>@loadingMessage</p>
    </div>
}

@code {
    private bool isLoading = false;
    private string statusMessage = "";
    private string loadingMessage = "";
    private bool connectionStatus = false;
    private bool showSqlPreview = false;
    private ETLSqlPreview? currentSqlPreview = null;
    private string currentPreviewEntity = "";
    
    private List<TableStatus> tableStatuses = new List<TableStatus>();
    private List<ETLRunHistory> etlHistory = new List<ETLRunHistory>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
    }

    private async Task TestConnection()
    {
        isLoading = true;
        loadingMessage = "Testing Oracle connection...";
        statusMessage = "";
        
        try
        {
            connectionStatus = await ETLService.TestConnection();
            statusMessage = connectionStatus ? 
                "✅ Successfully connected to Oracle database" : 
                "❌ Failed to connect to Oracle database";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Connection test failed");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadOperators()
    {
        isLoading = true;
        loadingMessage = "Loading operators with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadOperators();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load operators");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPlants()
    {
        isLoading = true;
        loadingMessage = "Loading plants with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadPlants();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load plants");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        loadingMessage = "Loading issues with SCD2 processing...";
        statusMessage = "";
        
        try
        {
            var result = await ETLService.LoadIssuesForSelectedPlants();
            
            if (result.Status == "SUCCESS")
            {
                statusMessage = $"✅ Success: {result.Message}";
            }
            else
            {
                statusMessage = $"⚠️ {result.Status}: {result.Message}";
            }
            
            await RefreshStatus();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Failed to load issues");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshStatus()
    {
        try
        {
            tableStatuses = await ETLService.GetTableStatuses();
            etlHistory = await ETLService.GetETLHistory(10);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh status");
        }
    }

    private void ShowSqlPreview(string entity)
    {
        currentPreviewEntity = entity;
        showSqlPreview = true;
        
        currentSqlPreview = entity switch
        {
            "operators" => ETLService.GetOperatorsSqlPreview(),
            "plants" => ETLService.GetPlantsSqlPreview(),
            "issues" => ETLService.GetIssuesSqlPreview(),
            _ => null
        };
    }

    private async Task ExecuteAfterPreview()
    {
        showSqlPreview = false;
        
        await Task.Yield(); // Allow UI to update
        
        switch (currentPreviewEntity)
        {
            case "operators":
                await LoadOperators();
                break;
            case "plants":
                await LoadPlants();
                break;
            case "issues":
                await LoadIssues();
                break;
        }
    }
}