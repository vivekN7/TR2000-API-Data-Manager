> Use @TR2000/TR2K/Tasks/ai-dev/create-prd.md to create a PRD for a new project. The project is as follows: The following page lists APIs to get information for various pipe class sheets for various oil and gas platform projects. The tables from each of thes APIS need to be exported to a local SQLite database. There should also be a webpage to display each of these tables for the various projects and pipe class sheets. Use 
  dapper for the ORM.

  https://tr2000api.equinor.com/Home/Help
  ⎿  Read TR2000/TR2K/Tasks/ai-dev/create-prd.md (56 lines)

● I'll help you create a PRD for the TR2000 API data management project. Let me ask some clarifying questions first to ensure I understand all the requirements properly:

  Clarifying Questions

  Problem/Goal:
  1. What is the main business problem this solves?
  a) Manual data entry/management is time-consuming
  b) Need centralized access to pipe class data across projects
  c) API data needs to be available offline
  d) All of the above

  Target Users:
  2. Who are the primary users of this system?
     a) Piping engineers
     b) Project managers   c) Data analysts
     d) Multiple user types (please specify)

  Data Synchronization:
  3. How should the data sync work?
     a) One-time import only
     b) Manual refresh on demand
     c) Scheduled automatic updates (daily/weekly)
     d) Real-time sync

  Web Interface Requirements:
  4. For the webpage display, what functionality is needed?
     a) Read-only table view with search/filter
     b) Basic CRUD operations (create/edit/delete)
     c) Advanced filtering and reporting
     d) Data export capabilities (Excel, CSV, etc.)

  Project Structure:
  5. Should this be:
     a) A standalone web application
     b) Part of the existing TR2K Blazor project
     c) A separate service with API endpoints
     d) Other (please specify)

  Data Management:
  6. What happens when API data changes?
     a) Overwrite existing data completely
     b) Track changes/versions
     c) Merge with conflict resolution
     d) User decides per sync

  Error Handling:
  7. If API calls fail, should the system:
     a) Show cached data with warning
     b) Retry automatically
     c) Log errors and continue
     d) All of the above

  Please respond with your letter choices (e.g., "1d, 2a, 3c...") so I can create a comprehensive PRD.

  


1) a and b. We have currently only been able to access the pipe class sheets from PDFs and then recreate all of this in our own database manually to be used for other applications. Now there is an API to directly export. This project now is to initially test what data is actually present in this API and to then explore further steps for a bigger application. I want it in a local sqllite database for now just for testing purpose and to also know exactly what tables to create in our actual database in oracle. For sqlite: create the database table headers with exactly the same headers as the API endpoint tables. Use dapper as the ORM.

2) Piping engineers, as well as other applications that will directly import the relevant data from the structured database.

3) For now I want to have separate webpage for each api endpoint (or a drop down to select the endpoint) and that will then load only the necessary data for that api endpoint. Eventually when we set up the proper backend in oracle there will be nightly exports.

4) Read only tables in a grid. It should have filtering, conditional formatting, reporting and export-to-excel capabilities. But this can be handled with the default devexpress components which I will do myself. For now only display the grid. No create, delete or editing functions for now. 

5) I have made the basic TR2K Blazor project in the folder TR2K with the devexpress components already setup. So work directly with this project. The blazor project has been setup as Auto (both client and server) - maintain this as we may want to add interactivity later to the client. Any sensitive data should always be in the server project. With regards to the folder structure: Also seperate out all the views from logic neatly in a separate new project called "TR2KBlazorLibrary". In this "TR2KBlazorLibrary" - Create any models required in a separate folder called "Models"  and any logic in a separate folder called "Logic". 

6) Overwrite existing data completely in the sqllite db each time an import is required.

7) Log error and display warning message. Do not show cached data.




 